{"version":3,"sources":["../node_modules/codemirror/mode/shell/shell.js"],"names":["CodeMirror","defineMode","words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","test","eol","peek","cur","current","hasOwnProperty","quote","close","escaped","shift","backUp","tokenStringStart","registerHelper","concat","startState","token","closeBrackets","lineComment","fold","defineMIME","mod"],"mappings":"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","file":"static/js/513.90beb2ac.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('shell', function () {\n    var words = {};\n\n    function define(style, dict) {\n      for (var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    }\n\n    ;\n    var commonAtoms = [\"true\", \"false\"];\n    var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\", \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n    var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\", \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\", \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\", \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\", \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\", \"yes\", \"zsh\"];\n    CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n    define('atom', commonAtoms);\n    define('keyword', commonKeywords);\n    define('builtin', commonCommands);\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) return null;\n      var sol = stream.sol();\n      var ch = stream.next();\n\n      if (ch === '\\\\') {\n        stream.next();\n        return null;\n      }\n\n      if (ch === '\\'' || ch === '\"' || ch === '`') {\n        state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n        return tokenize(stream, state);\n      }\n\n      if (ch === '#') {\n        if (sol && stream.eat('!')) {\n          stream.skipToEnd();\n          return 'meta'; // 'comment'?\n        }\n\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (ch === '$') {\n        state.tokens.unshift(tokenDollar);\n        return tokenize(stream, state);\n      }\n\n      if (ch === '+' || ch === '=') {\n        return 'operator';\n      }\n\n      if (ch === '-') {\n        stream.eat('-');\n        stream.eatWhile(/\\w/);\n        return 'attribute';\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n\n        if (stream.eol() || !/\\w/.test(stream.peek())) {\n          return 'number';\n        }\n      }\n\n      stream.eatWhile(/[\\w-]/);\n      var cur = stream.current();\n      if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n      return words.hasOwnProperty(cur) ? words[cur] : null;\n    }\n\n    function tokenString(quote, style) {\n      var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote;\n      return function (stream, state) {\n        var next,\n            escaped = false;\n\n        while ((next = stream.next()) != null) {\n          if (next === close && !escaped) {\n            state.tokens.shift();\n            break;\n          } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n            escaped = true;\n            stream.backUp(1);\n            state.tokens.unshift(tokenDollar);\n            break;\n          } else if (!escaped && quote !== close && next === quote) {\n            state.tokens.unshift(tokenString(quote, style));\n            return tokenize(stream, state);\n          } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n            state.tokens.unshift(tokenStringStart(next, \"string\"));\n            stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && next === '\\\\';\n        }\n\n        return style;\n      };\n    }\n\n    ;\n\n    function tokenStringStart(quote, style) {\n      return function (stream, state) {\n        state.tokens[0] = tokenString(quote, style);\n        stream.next();\n        return tokenize(stream, state);\n      };\n    }\n\n    var tokenDollar = function tokenDollar(stream, state) {\n      if (state.tokens.length > 1) stream.eat('$');\n      var ch = stream.next();\n\n      if (/['\"({]/.test(ch)) {\n        state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n        return tokenize(stream, state);\n      }\n\n      if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n      state.tokens.shift();\n      return 'def';\n    };\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase)(stream, state);\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokens: []\n        };\n      },\n      token: function token(stream, state) {\n        return tokenize(stream, state);\n      },\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      lineComment: '#',\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-sh', 'shell'); // Apache uses a slightly different Media Type for Shell scripts\n  // http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n\n  CodeMirror.defineMIME('application/x-sh', 'shell');\n});"],"sourceRoot":""}