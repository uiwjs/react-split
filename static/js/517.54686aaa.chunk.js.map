{"version":3,"sources":["../node_modules/codemirror/mode/solr/solr.js"],"names":["CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","tokenWord","ch","stream","state","word","peek","match","next","tokenize","tokenBase","test","parseFloat","toString","isNumber","operator","quote","escaped","style","eat","startState","token","eatSpace","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEAA,EAAWC,WAAW,QAAQ,WAG5B,IAAIC,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,qBA8BvB,SAASC,EAAUC,GACjB,OAAO,SAAUC,EAAQC,GAGvB,IAFA,IAAIC,EAAOH,GAEHA,EAAKC,EAAOG,SAAqC,MAA1BJ,EAAGK,MAAMT,IACtCO,GAAQF,EAAOK,OAIjB,OADAJ,EAAMK,SAAWC,EACbV,EAAiBW,KAAKN,GAAc,WArC5C,SAAkBA,GAChB,OAAOO,WAAWP,GAAMQ,aAAeR,EAoCuBS,CAAST,GAAc,SAAmC,KAAjBF,EAAOG,OAAsB,QAAoB,UAI1J,SAASI,EAAUP,EAAQC,GACzB,IAvBqBW,EAfFC,EAsCfd,EAAKC,EAAOK,OAEhB,MADU,KAANN,EAAWE,EAAMK,UAvCFO,EAuCyBd,EAtCrC,SAAUC,EAAQC,GAIvB,IAHA,IACII,EADAS,GAAU,EAGmB,OAAzBT,EAAOL,EAAOK,UAChBA,GAAQQ,GAAUC,IACtBA,GAAWA,GAAmB,MAART,EAIxB,OADKS,IAASb,EAAMK,SAAWC,GACxB,WA4BgDX,EAAeY,KAAKT,GAAKE,EAAMK,UAxBnEM,EAwB4Fb,EAvB1G,SAAUC,EAAQC,GACvB,IAAIc,EAAQ,WAGZ,MAFgB,KAAZH,EAAiBG,GAAS,YAAiC,KAAZH,EAAiBG,GAAS,YAAiC,KAAZH,EAAiBZ,EAAOgB,IAAI,MAA2B,KAAZJ,EAAiBZ,EAAOgB,IAAI,MAA2B,KAAZJ,IAAiBG,GAAS,UAClNd,EAAMK,SAAWC,EACVQ,IAmBqHpB,EAAaa,KAAKT,KAAKE,EAAMK,SAAWR,EAAUC,IACzKE,EAAMK,UAAYC,EAAYN,EAAMK,SAASN,EAAQC,GAAS,KAGvE,MAAO,CACLgB,WAAY,WACV,MAAO,CACLX,SAAUC,IAGdW,MAAO,SAAelB,EAAQC,GAC5B,OAAID,EAAOmB,WAAmB,KACvBlB,EAAMK,SAASN,EAAQC,QAIpCR,EAAW2B,WAAW,cAAe,QAxEnCC,CAAI,EAAQ","file":"static/js/517.54686aaa.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"solr\", function () {\n    \"use strict\";\n\n    var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n    var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n    var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n    function isNumber(word) {\n      return parseFloat(word).toString() === word;\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenOperator(operator) {\n      return function (stream, state) {\n        var style = \"operator\";\n        if (operator == \"+\") style += \" positive\";else if (operator == \"-\") style += \" negative\";else if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);else if (operator == \"^\") style += \" boost\";\n        state.tokenize = tokenBase;\n        return style;\n      };\n    }\n\n    function tokenWord(ch) {\n      return function (stream, state) {\n        var word = ch;\n\n        while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n          word += stream.next();\n        }\n\n        state.tokenize = tokenBase;\n        if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"field\";else return \"string\";\n      };\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n      return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n});"],"sourceRoot":""}