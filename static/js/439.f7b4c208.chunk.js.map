{"version":3,"sources":["../node_modules/codemirror/mode/gfm/gfm.js","../node_modules/codemirror/addon/mode/overlay.js"],"names":["CodeMirror","urlRE","defineMode","config","modeConfig","codeDepth","gfmOverlay","startState","code","codeBlock","ateSpace","copyState","s","token","stream","state","combineTokens","match","skipToEnd","sol","peek","next","before","pos","eatWhile","difference","eatSpace","gitHubSpice","string","slice","start","test","charAt","blankLine","markdownConfig","taskLists","strikethrough","emoji","attr","name","overlayMode","getMode","defineMIME","mod","base","overlay","combine","basePos","baseCur","overlayPos","overlayCur","streamSeen","Math","min","indent","textAfter","line","electricChars","innerMode","mode","baseToken","overlayToken"],"mappings":"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","file":"static/js/439.f7b4c208.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../markdown/markdown\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\\.beep|\\.lwz|\\.xpc|\\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\\.beeps?|xmpp|xri|ymsgr|z39\\.50[rs]?):(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n  CodeMirror.defineMode(\"gfm\", function (config, modeConfig) {\n    var codeDepth = 0;\n\n    function blankLine(state) {\n      state.code = false;\n      return null;\n    }\n\n    var gfmOverlay = {\n      startState: function startState() {\n        return {\n          code: false,\n          codeBlock: false,\n          ateSpace: false\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          code: s.code,\n          codeBlock: s.codeBlock,\n          ateSpace: s.ateSpace\n        };\n      },\n      token: function token(stream, state) {\n        state.combineTokens = null; // Hack to prevent formatting override inside code blocks (block and inline)\n\n        if (state.codeBlock) {\n          if (stream.match(/^```+/)) {\n            state.codeBlock = false;\n            return null;\n          }\n\n          stream.skipToEnd();\n          return null;\n        }\n\n        if (stream.sol()) {\n          state.code = false;\n        }\n\n        if (stream.sol() && stream.match(/^```+/)) {\n          stream.skipToEnd();\n          state.codeBlock = true;\n          return null;\n        } // If this block is changed, it may need to be updated in Markdown mode\n\n\n        if (stream.peek() === '`') {\n          stream.next();\n          var before = stream.pos;\n          stream.eatWhile('`');\n          var difference = 1 + stream.pos - before;\n\n          if (!state.code) {\n            codeDepth = difference;\n            state.code = true;\n          } else {\n            if (difference === codeDepth) {\n              // Must be exact\n              state.code = false;\n            }\n          }\n\n          return null;\n        } else if (state.code) {\n          stream.next();\n          return null;\n        } // Check if space. If so, links can be formatted later on\n\n\n        if (stream.eatSpace()) {\n          state.ateSpace = true;\n          return null;\n        }\n\n        if (stream.sol() || state.ateSpace) {\n          state.ateSpace = false;\n\n          if (modeConfig.gitHubSpice !== false) {\n            if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?=.{0,6}\\d)(?:[a-f0-9]{7,40}\\b)/)) {\n              // User/Project@SHA\n              // User@SHA\n              // SHA\n              state.combineTokens = true;\n              return \"link\";\n            } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n              // User/Project#Num\n              // User#Num\n              // #Num\n              state.combineTokens = true;\n              return \"link\";\n            }\n          }\n        }\n\n        if (stream.match(urlRE) && stream.string.slice(stream.start - 2, stream.start) != \"](\" && (stream.start == 0 || /\\W/.test(stream.string.charAt(stream.start - 1)))) {\n          // URLs\n          // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n          // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n          // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL\n          state.combineTokens = true;\n          return \"link\";\n        }\n\n        stream.next();\n        return null;\n      },\n      blankLine: blankLine\n    };\n    var markdownConfig = {\n      taskLists: true,\n      strikethrough: true,\n      emoji: true\n    };\n\n    for (var attr in modeConfig) {\n      markdownConfig[attr] = modeConfig[attr];\n    }\n\n    markdownConfig.name = \"markdown\";\n    return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);\n  }, \"markdown\");\n  CodeMirror.defineMIME(\"text/x-gfm\", \"gfm\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function startState() {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter, line) {\n        return base.indent(state.base, textAfter, line);\n      },\n      electricChars: base.electricChars,\n      innerMode: function innerMode(state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function blankLine(state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});"],"sourceRoot":""}