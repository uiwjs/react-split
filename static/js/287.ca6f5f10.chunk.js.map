{"version":3,"sources":["../node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","pattern","alias","lookbehind","insertBefore","inside","punctuation","string_interpolation","greedy","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders"],"mappings":"gHAYA,SAAWA,GACTA,EAAMC,UAAUC,IAAMF,EAAMC,UAAUE,OAAO,QAAS,CACpD,QAAW,ueACX,QAAW,CACTC,QAAS,sBACTC,MAAO,YAET,SAAY,CAAC,uBAAwB,iBACrC,QAAW,CACTD,QAAS,uCACTE,YAAY,KAGhBN,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC5C,gBAAiB,CACfH,QAAS,eACTE,YAAY,EACZD,MAAO,aAGXL,EAAMC,UAAUM,aAAa,MAAO,UAAW,CAC7C,UAAa,CACXH,QAAS,6BACTC,MAAO,eAGXL,EAAMC,UAAUM,aAAa,MAAO,UAAW,CAC7C,SAAY,sBACZ,QAAW,CACTH,QAAS,kCACTE,YAAY,EACZE,OAAQ,CACNC,YAAa,SAKnBT,EAAMC,UAAUM,aAAa,MAAO,WAAY,CAC9C,SAAY,CACVH,QAAS,YACTE,YAAY,KAGhB,IAAII,EAAuB,CACzBN,QAAS,6EACTE,YAAY,EACZE,OAAQR,EAAMC,UAAUC,KAE1BF,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC5C,gBAAiB,CACfH,QAAS,kDACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACN,UAAa,CACXJ,QAAS,2BACTC,MAAO,SACPG,OAAQ,CACN,YAAe,mBAKvB,iBAAkB,CAChBJ,QAAS,sGACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACN,UAAa,CACXJ,QAAS,yCACTC,MAAO,SACPG,OAAQ,CACN,YAAe,iBAGnB,cAAiBE,IAIrB,uBAAwB,CACtBN,QAAS,yBACTO,QAAQ,EACRN,MAAO,UAET,uBAAwB,CACtBD,QAAS,yBACTO,QAAQ,EACRN,MAAO,SACPG,OAAQ,CACN,cAAiBE,aAMhBV,EAAMC,UAAUC,IAAY,OACnCF,EAAMY,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,GAAK,MAAMC,KAAKD,EAAIE,MAApB,CAKAhB,EAAMC,UAAU,qBAAqBgB,kBAAkBH,EAAK,MAD3C,sJAGnBd,EAAMY,MAAMC,IAAI,kBAAkB,SAAUC,GAC1Cd,EAAMC,UAAU,qBAAqBiB,qBAAqBJ,EAAK,UAzGnE,CA2GGd","file":"static/js/287.ca6f5f10.chunk.js","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: Prism.languages.php\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);"],"sourceRoot":""}