{"version":3,"sources":["../node_modules/prismjs/components/prism-sass.js"],"names":["Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property"],"mappings":"gHAAA,SAAWA,GACTA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,MAAO,CAEnD,QAAW,CACTC,QAAS,iDACTC,YAAY,KAGhBL,EAAMC,UAAUK,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACN,OAAU,+BAITP,EAAMC,UAAUC,KAAKM,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CAAC,2CAA4C,CAC1DN,QAAS,eACTC,YAAY,IAEdL,EAAMC,UAAUK,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACN,YAAe,IACf,SAAYE,EACZ,SAAYC,IAIhB,gBAAiB,CACfN,QAAS,sCACTG,OAAQ,CACN,SAAY,CAAC,kBAAmB,CAC9BH,QAAS,aACTC,YAAY,IAEd,YAAe,IACf,SAAYI,EACZ,SAAYC,EACZ,UAAaV,EAAMC,UAAUC,KAAKS,qBAIjCX,EAAMC,UAAUC,KAAKU,gBACrBZ,EAAMC,UAAUC,KAAKS,UAG5BX,EAAMC,UAAUK,aAAa,OAAQ,cAAe,CAClD,SAAY,CACVF,QAAS,yEACTC,YAAY,KAxDlB,CA2DGL","file":"static/js/341.53215cc9.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);"],"sourceRoot":""}