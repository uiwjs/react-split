{"version":3,"sources":["../node_modules/codemirror/mode/cypher/cypher.js"],"names":["CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","curPunc","tokenBase","stream","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","lines","split","reProcessedPortion","i","length","replace","trim","defineMIME","mod"],"mappings":"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","file":"static/js/460.ba326c16.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var wordRegexp = function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function (config) {\n    var tokenBase = function tokenBase(stream\n    /*, state*/\n    ) {\n      var ch = stream.next();\n\n      if (ch === '\"') {\n        stream.match(/.*?\"/);\n        return \"string\";\n      }\n\n      if (ch === \"'\") {\n        stream.match(/.*?'/);\n        return \"string\";\n      }\n\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n\n    var pushContext = function pushContext(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n\n    var popContext = function popContext(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n    return {\n      startState: function startState()\n      /*base*/\n      {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) {\n            state.context.align = false;\n          }\n\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var style = state.tokenize(stream, state);\n\n        if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function autoFormatLineBreaks(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      }\n\n      return lines.join(\"\\n\");\n    }\n  };\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n});"],"sourceRoot":""}