{"version":3,"sources":["../node_modules/codemirror/mode/sparql/sparql.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","eat","word","current","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEAA,EAAWC,WAAW,UAAU,SAAUC,GACxC,IACIC,EADAC,EAAaF,EAAOE,WAGxB,SAASC,EAAWC,GAClB,OAAO,IAAIC,OAAO,OAASD,EAAME,KAAK,KAAO,KAAM,KAGrD,IAAIC,EAAMJ,EAAW,CAAC,MAAO,OAAQ,cAAe,WAAY,QAAS,WAAY,QAAS,QAAS,MAAO,MAAO,QAAS,QAAS,MAAO,MAAO,MAAO,MAAO,SAAU,eAAgB,OAAQ,MAAO,OAAQ,QAAS,QAAS,SAAU,SAAU,SAAU,UAAW,QAAS,QAAS,iBAAkB,WAAY,YAAa,UAAW,YAAa,WAAY,OAAQ,QAAS,MAAO,QAAS,UAAW,UAAW,WAAY,KAAM,MAAO,OAAQ,UAAW,MAAO,OAAQ,SAAU,SAAU,SAAU,WAAY,KAAM,UAAW,QAAS,YAAa,QAAS,SAAU,UAAW,YAAa,IAAK,SAC/lBK,EAAWL,EAAW,CAAC,OAAQ,SAAU,SAAU,WAAY,UAAW,YAAa,WAAY,MAAO,OAAQ,QAAS,QAAS,QAAS,QAAS,SAAU,SAAU,WAAY,QAAS,KAAM,MAAO,OAAQ,KAAM,SAAU,QAAS,SAAU,QAAS,QAAS,KAAM,MAAO,UAAW,SAAU,QAAS,SAAU,SAAU,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,KAAM,OAAQ,MAAO,SAAU,OAAQ,QAAS,SAC1aM,EAAgB,qBAEpB,SAASC,EAAUC,EAAQC,GACzB,IA4CoBC,EA5ChBC,EAAKH,EAAOI,OAGhB,GAFAd,EAAU,KAEA,KAANa,GAAmB,KAANA,EACf,MAAU,KAANA,GAAaH,EAAOK,MAAM,MAAM,GAC3B,YAGTL,EAAOK,MAAM,kUACN,cACF,GAAU,KAANF,GAAcH,EAAOK,MAAM,gBAAgB,GAG/C,IAAU,KAANF,GAAoB,KAANA,EAEvB,OADAF,EAAMK,UA8BYJ,EA9BYC,EA+BzB,SAAUH,EAAQC,GAIvB,IAHA,IACIE,EADAI,GAAU,EAGiB,OAAvBJ,EAAKH,EAAOI,SAAiB,CACnC,GAAID,GAAMD,IAAUK,EAAS,CAC3BN,EAAMK,SAAWP,EACjB,MAGFQ,GAAWA,GAAiB,MAANJ,EAGxB,MAAO,WA3CAF,EAAMK,SAASN,EAAQC,GACzB,GAAI,mBAAmBO,KAAKL,GAEjC,OADAb,EAAUa,EACH,UACF,GAAU,KAANA,EAET,OADAH,EAAOS,YACA,UACF,GAAIX,EAAcU,KAAKL,GAE5B,OADAH,EAAOU,SAASZ,GACT,WACF,GAAU,KAANK,EAET,OADAH,EAAOU,SAAS,eACT,OACF,GAAU,KAANP,EAET,OADAH,EAAOU,SAAS,cACT,OAIP,GAFAV,EAAOU,SAAS,WAEZV,EAAOW,IAAI,KAEb,OADAX,EAAOU,SAAS,aACT,OAGT,IAAIE,EAAOZ,EAAOa,UAClB,OAAIjB,EAAIY,KAAKI,GAAc,UAAmBf,EAASW,KAAKI,GAAc,UAAsB,WA5BhG,OADAZ,EAAOK,MAAM,oBACN,OAkDX,SAASS,EAAYb,EAAOc,EAAMC,GAChCf,EAAMgB,QAAU,CACdC,KAAMjB,EAAMgB,QACZE,OAAQlB,EAAMkB,OACdH,IAAKA,EACLD,KAAMA,GAIV,SAASK,EAAWnB,GAClBA,EAAMkB,OAASlB,EAAMgB,QAAQE,OAC7BlB,EAAMgB,QAAUhB,EAAMgB,QAAQC,KAGhC,MAAO,CACLG,WAAY,WACV,MAAO,CACLf,SAAUP,EACVkB,QAAS,KACTE,OAAQ,EACRH,IAAK,IAGTM,MAAO,SAAetB,EAAQC,GAM5B,GALID,EAAOuB,QACLtB,EAAMgB,SAAkC,MAAvBhB,EAAMgB,QAAQO,QAAevB,EAAMgB,QAAQO,OAAQ,GACxEvB,EAAMkB,OAASnB,EAAOyB,eAGpBzB,EAAO0B,WAAY,OAAO,KAC9B,IAAIC,EAAQ1B,EAAMK,SAASN,EAAQC,GAMnC,GAJa,WAAT0B,GAAsB1B,EAAMgB,SAAkC,MAAvBhB,EAAMgB,QAAQO,OAAuC,WAAtBvB,EAAMgB,QAAQF,OACtFd,EAAMgB,QAAQO,OAAQ,GAGT,KAAXlC,EAAgBwB,EAAYb,EAAO,IAAKD,EAAO4B,eAAe,GAAe,KAAXtC,EAAgBwB,EAAYb,EAAO,IAAKD,EAAO4B,eAAe,GAAe,KAAXtC,EAAgBwB,EAAYb,EAAO,IAAKD,EAAO4B,eAAe,GAAI,WAAWpB,KAAKlB,GAAU,CAClO,KAAOW,EAAMgB,SAAiC,WAAtBhB,EAAMgB,QAAQF,MACpCK,EAAWnB,GAGTA,EAAMgB,SAAW3B,GAAWW,EAAMgB,QAAQF,OAC5CK,EAAWnB,GACI,KAAXX,GAAkBW,EAAMgB,SAAiC,WAAtBhB,EAAMgB,QAAQF,MAAmBK,EAAWnB,QAEjE,KAAXX,GAAkBW,EAAMgB,SAAiC,WAAtBhB,EAAMgB,QAAQF,KAAmBK,EAAWnB,GAAgB,uBAAuBO,KAAKmB,IAAU1B,EAAMgB,UAChJ,SAAST,KAAKP,EAAMgB,QAAQF,MAAOD,EAAYb,EAAO,UAAWD,EAAO4B,UAAyC,WAAtB3B,EAAMgB,QAAQF,MAAsBd,EAAMgB,QAAQO,QAC/IvB,EAAMgB,QAAQO,OAAQ,EACtBvB,EAAMgB,QAAQD,IAAMhB,EAAO4B,WAG/B,OAAOD,GAETR,OAAQ,SAAgBlB,EAAO4B,GAC7B,IAAIC,EAAYD,GAAaA,EAAUE,OAAO,GAC1Cd,EAAUhB,EAAMgB,QACpB,GAAI,SAAST,KAAKsB,GAAY,KAAOb,GAA2B,WAAhBA,EAAQF,MACtDE,EAAUA,EAAQC,KAEpB,IAAIc,EAAUf,GAAWa,GAAab,EAAQF,KAC9C,OAAKE,EAA2C,WAAhBA,EAAQF,KAA0BE,EAAQD,IAAaC,EAAQO,MAAcP,EAAQD,KAAOgB,EAAU,EAAI,GAAef,EAAQE,QAAUa,EAAU,EAAIzC,GAApK,GAEvB0C,YAAa,QAGjB9C,EAAW+C,WAAW,2BAA4B,UAlJhDC,CAAI,EAAQ","file":"static/js/517.b713ebcc.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sparql\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n\n    var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\", \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\", \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\", \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\", \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\", \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\", \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n    var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\", \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\", \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\", \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\", \"true\", \"false\", \"with\", \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\n    var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n\n      if (ch == \"$\" || ch == \"?\") {\n        if (ch == \"?\" && stream.match(/\\s/, false)) {\n          return \"operator\";\n        }\n\n        stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n        return \"variable-2\";\n      } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"bracket\";\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.eatWhile(/[\\w\\d\\._\\-]/);\n        return \"atom\";\n      } else if (ch == \"@\") {\n        stream.eatWhile(/[a-z\\d\\-]/i);\n        return \"meta\";\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n\n        var word = stream.current();\n        if (ops.test(word)) return \"builtin\";else if (keywords.test(word)) return \"keyword\";else return \"variable\";\n      }\n    }\n\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return \"string\";\n      };\n    }\n\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc == state.context.type) {\n            popContext(state);\n            if (curPunc == \"}\" && state.context && state.context.type == \"pattern\") popContext(state);\n          }\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") {\n          context = context.prev;\n        }\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n});"],"sourceRoot":""}