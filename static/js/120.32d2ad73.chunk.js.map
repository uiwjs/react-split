{"version":3,"sources":["../node_modules/codemirror/mode/yacas/yacas.js"],"names":["CodeMirror","defineMode","_config","_parserConfig","bodiedOps","str","obj","words","split","i","length","pIdentifier","reFloatForm","RegExp","reIdentifier","rePattern","reFunctionLike","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","currentScope","pop","end","escaped","prev","startState","token","eatSpace","indent","textAfter","Pass","delta","indentUnit","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","mod"],"mappings":"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","file":"static/js/120.32d2ad73.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('yacas', function (_config, _parserConfig) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" + \"FromString Function Integrate InverseTaylor Limit \" + \"LocalSymbols Macro MacroRule MacroRulePattern \" + \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" + \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" + \"ToStdout ToString TraceRule Until While\"); // patterns\n\n    var pFloatForm = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n    var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\"; // regular expressions\n\n    var reFloatForm = new RegExp(pFloatForm);\n    var reIdentifier = new RegExp(pIdentifier);\n    var rePattern = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n    var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n    function tokenBase(stream, state) {\n      var ch; // get next character\n\n      ch = stream.next(); // string\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      } // comment\n\n\n      if (ch === '/') {\n        if (stream.eat('*')) {\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      } // go back one character\n\n\n      stream.backUp(1); // update scope info\n\n      var m = stream.match(/^(\\w+)\\s*\\(/, false);\n      if (m !== null && bodiedOps.hasOwnProperty(m[1])) state.scopes.push('bodied');\n      var scope = currentScope(state);\n      if (scope === 'bodied' && ch === '[') state.scopes.pop();\n      if (ch === '[' || ch === '{' || ch === '(') state.scopes.push(ch);\n      scope = currentScope(state);\n      if (scope === '[' && ch === ']' || scope === '{' && ch === '}' || scope === '(' && ch === ')') state.scopes.pop();\n\n      if (ch === ';') {\n        while (scope === 'bodied') {\n          state.scopes.pop();\n          scope = currentScope(state);\n        }\n      } // look for ordered rules\n\n\n      if (stream.match(/\\d+ *#/, true, false)) {\n        return 'qualifier';\n      } // look for numbers\n\n\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      } // look for placeholders\n\n\n      if (stream.match(rePattern, true, false)) {\n        return 'variable-3';\n      } // match all braces separately\n\n\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      } // literals looking like function calls\n\n\n      if (stream.match(reFunctionLike, true, false)) {\n        stream.backUp(1);\n        return 'variable';\n      } // all other identifiers\n\n\n      if (stream.match(reIdentifier, true, false)) {\n        return 'variable-2';\n      } // operators; note that operators like @@ or /; are matched separately for each symbol.\n\n\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n        return 'operator';\n      } // everything else is an error\n\n\n      return 'error';\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while ((next = stream.next()) != null) {\n        if (prev === '*' && next === '/') {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        prev = next;\n      }\n\n      return 'comment';\n    }\n\n    function currentScope(state) {\n      var scope = null;\n      if (state.scopes.length > 0) scope = state.scopes[state.scopes.length - 1];\n      return scope;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          scopes: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize !== tokenBase && state.tokenize !== null) return CodeMirror.Pass;\n        var delta = 0;\n        if (textAfter === ']' || textAfter === '];' || textAfter === '}' || textAfter === '};' || textAfter === ');') delta = -1;\n        return (state.scopes.length + delta) * _config.indentUnit;\n      },\n      electricChars: \"{}[]();\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-yacas', {\n    name: 'yacas'\n  });\n});"],"sourceRoot":""}