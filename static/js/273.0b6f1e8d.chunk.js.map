{"version":3,"sources":["../node_modules/prismjs/components/prism-parigp.js"],"names":["Prism","languages","parigp","pattern","greedy","keywords","map","keyword","split","join","RegExp","lookbehind"],"mappings":"+GAAAA,MAAMC,UAAUC,OAAS,CACvB,QAAW,0BACX,OAAU,CACRC,QAAS,wBACTC,QAAQ,GAKV,QAAW,WACT,IAAIC,EAAW,CAAC,aAAc,QAAS,WAAY,UAAW,SAAU,QAAS,eAAgB,SAAU,SAAU,UAAW,WAAY,UAAW,cAAe,SAAU,MAAO,QAAS,KAAM,QAAS,KAAM,OAAQ,SAAU,QAAS,SAIhP,OAHAA,EAAWA,EAASC,KAAI,SAAUC,GAChC,OAAOA,EAAQC,MAAM,IAAIC,KAAK,SAC7BA,KAAK,KACDC,OAAO,SAAWL,EAAW,QAL3B,GAOX,SAAY,oBACZ,OAAU,CAERF,QAAS,0GACTQ,YAAY,GAEd,SAAY,sLACZ,YAAe","file":"static/js/273.0b6f1e8d.chunk.js","sourcesContent":["Prism.languages.parigp = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n    greedy: true\n  },\n  // PARI/GP does not care about white spaces at all\n  // so let's process the keywords to build an appropriate regexp\n  // (e.g. \"b *r *e *a *k\", etc.)\n  'keyword': function () {\n    var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\n    keywords = keywords.map(function (keyword) {\n      return keyword.split('').join(' *');\n    }).join('|');\n    return RegExp('\\\\b(?:' + keywords + ')\\\\b');\n  }(),\n  'function': /\\w[\\w ]*?(?= *\\()/,\n  'number': {\n    // The lookbehind and the negative lookahead prevent from breaking the .. operator\n    pattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\n    lookbehind: true\n  },\n  'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n  'punctuation': /[\\[\\]{}().,:;|]/\n};"],"sourceRoot":""}