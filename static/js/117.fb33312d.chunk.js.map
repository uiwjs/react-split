{"version":3,"sources":["../node_modules/codemirror/mode/webidl/webidl.js"],"names":["CodeMirror","wordRegexp","words","RegExp","join","builtinArray","builtins","typeArray","types","keywordArray","keywords","atomArray","atoms","registerHelper","concat","startDefs","endDefs","singleOperators","integers","floats","identifiers","identifiersEnd","strings","multilineComments","multilineCommentsStart","multilineCommentsEnd","defineMode","startState","inComment","lastToken","startDef","endDef","token","stream","state","style","eatSpace","match","skipToEnd","nextToken","next","readToken","cur","current","test","defineMIME","mod"],"mappings":"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","file":"static/js/117.fb33312d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  ;\n  var builtinArray = [\"Clamp\", \"Constructor\", \"EnforceRange\", \"Exposed\", \"ImplicitThis\", \"Global\", \"PrimaryGlobal\", \"LegacyArrayClass\", \"LegacyUnenumerableNamedProperties\", \"LenientThis\", \"NamedConstructor\", \"NewObject\", \"NoInterfaceObject\", \"OverrideBuiltins\", \"PutForwards\", \"Replaceable\", \"SameObject\", \"TreatNonObjectAsNull\", \"TreatNullAs\", \"EmptyString\", \"Unforgeable\", \"Unscopeable\"];\n  var builtins = wordRegexp(builtinArray);\n  var typeArray = [\"unsigned\", \"short\", \"long\", // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\", // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\", // Rest of PrimitiveType\n  \"Promise\", // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Float32Array\", \"Float64Array\", // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\", \"Error\", \"DOMException\", \"FrozenArray\", // Rest of NonAnyType\n  \"any\", // Rest of SingleType\n  \"void\" // Rest of ReturnType\n  ];\n  var types = wordRegexp(typeArray);\n  var keywordArray = [\"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\", \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\", \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\", \"stringifier\", \"typedef\", // ArgumentNameKeyword except\n  // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"];\n  var keywords = wordRegexp(keywordArray);\n  var atomArray = [\"true\", \"false\", // BooleanLiteral\n  \"Infinity\", \"NaN\", // FloatLiteral\n  \"null\" // Rest of ConstValue\n  ];\n  var atoms = wordRegexp(atomArray);\n  CodeMirror.registerHelper(\"hintWords\", \"webidl\", builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n  var startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\n  var startDefs = wordRegexp(startDefArray);\n  var endDefArray = [\"typedef\"];\n  var endDefs = wordRegexp(endDefArray);\n  var singleOperators = /^[:<=>?]/;\n  var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\n  var floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\n  var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\n  var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\n  var strings = /^\"[^\"]*\"/;\n  var multilineComments = /^\\/\\*.*?\\*\\//;\n  var multilineCommentsStart = /^\\/\\*.*/;\n  var multilineCommentsEnd = /^.*?\\*\\//;\n\n  function readToken(stream, state) {\n    // whitespace\n    if (stream.eatSpace()) return null; // comment\n\n    if (state.inComment) {\n      if (stream.match(multilineCommentsEnd)) {\n        state.inComment = false;\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(multilineComments)) return \"comment\";\n\n    if (stream.match(multilineCommentsStart)) {\n      state.inComment = true;\n      return \"comment\";\n    } // integer and float\n\n\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      if (stream.match(integers) || stream.match(floats)) return \"number\";\n    } // string\n\n\n    if (stream.match(strings)) return \"string\"; // identifier\n\n    if (state.startDef && stream.match(identifiers)) return \"def\";\n\n    if (state.endDef && stream.match(identifiersEnd)) {\n      state.endDef = false;\n      return \"def\";\n    }\n\n    if (stream.match(keywords)) return \"keyword\";\n\n    if (stream.match(types)) {\n      var lastToken = state.lastToken;\n      var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n      if (lastToken === \":\" || lastToken === \"implements\" || nextToken === \"implements\" || nextToken === \"=\") {\n        // Used as identifier\n        return \"builtin\";\n      } else {\n        // Used as type\n        return \"variable-3\";\n      }\n    }\n\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(atoms)) return \"atom\";\n    if (stream.match(identifiers)) return \"variable\"; // other\n\n    if (stream.match(singleOperators)) return \"operator\"; // unrecognized\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"webidl\", function () {\n    return {\n      startState: function startState() {\n        return {\n          // Is in multiline comment\n          inComment: false,\n          // Last non-whitespace, matched token\n          lastToken: \"\",\n          // Next token is a definition\n          startDef: false,\n          // Last token of the statement is a definition\n          endDef: false\n        };\n      },\n      token: function token(stream, state) {\n        var style = readToken(stream, state);\n\n        if (style) {\n          var cur = stream.current();\n          state.lastToken = cur;\n\n          if (style === \"keyword\") {\n            state.startDef = startDefs.test(cur);\n            state.endDef = state.endDef || endDefs.test(cur);\n          } else {\n            state.startDef = false;\n          }\n        }\n\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});"],"sourceRoot":""}