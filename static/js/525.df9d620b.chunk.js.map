{"version":3,"sources":["../node_modules/codemirror/mode/tiki/tiki.js"],"names":["CodeMirror","defineMode","config","inBlock","style","terminator","returnTokenizer","stream","state","eol","match","tokenize","inText","next","inLine","chain","parser","sol","ch","eat","eatSpace","eatWhile","inPlugin","pluginName","type","curState","setStyle","indentUnit","quote","peek","test","pass","i","arguments","length","cc","push","cont","apply","pushContext","startOfLine","noIndent","context","prev","indent","indented","popContext","element","attributes","err","endcloseplugin","name","attvalue","attvaluemaybe","startState","token","indentation","pop","textAfter","electricChars","defineMIME","mod"],"mappings":"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","file":"static/js/525.df9d620b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('tiki', function (config) {\n    function inBlock(style, terminator, returnTokenizer) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        if (returnTokenizer) state.tokenize = returnTokenizer;\n        return style;\n      };\n    }\n\n    function inLine(style) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.next();\n        }\n\n        state.tokenize = inText;\n        return style;\n      };\n    }\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var sol = stream.sol();\n      var ch = stream.next(); //non start of line\n\n      switch (ch) {\n        //switch is generally much faster than if, so it is used here\n        case \"{\":\n          //plugin\n          stream.eat(\"/\");\n          stream.eatSpace();\n          stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?(}]/);\n          state.tokenize = inPlugin;\n          return \"tag\";\n\n        case \"_\":\n          //bold\n          if (stream.eat(\"_\")) return chain(inBlock(\"strong\", \"__\", inText));\n          break;\n\n        case \"'\":\n          //italics\n          if (stream.eat(\"'\")) return chain(inBlock(\"em\", \"''\", inText));\n          break;\n\n        case \"(\":\n          // Wiki Link\n          if (stream.eat(\"(\")) return chain(inBlock(\"variable-2\", \"))\", inText));\n          break;\n\n        case \"[\":\n          // Weblink\n          return chain(inBlock(\"variable-3\", \"]\", inText));\n          break;\n\n        case \"|\":\n          //table\n          if (stream.eat(\"|\")) return chain(inBlock(\"comment\", \"||\"));\n          break;\n\n        case \"-\":\n          if (stream.eat(\"=\")) {\n            //titleBar\n            return chain(inBlock(\"header string\", \"=-\", inText));\n          } else if (stream.eat(\"-\")) {\n            //deleted\n            return chain(inBlock(\"error tw-deleted\", \"--\", inText));\n          }\n\n          break;\n\n        case \"=\":\n          //underline\n          if (stream.match(\"==\")) return chain(inBlock(\"tw-underline\", \"===\", inText));\n          break;\n\n        case \":\":\n          if (stream.eat(\":\")) return chain(inBlock(\"comment\", \"::\"));\n          break;\n\n        case \"^\":\n          //box\n          return chain(inBlock(\"tw-box\", \"^\"));\n          break;\n\n        case \"~\":\n          //np\n          if (stream.match(\"np~\")) return chain(inBlock(\"meta\", \"~/np~\"));\n          break;\n      } //start of line types\n\n\n      if (sol) {\n        switch (ch) {\n          case \"!\":\n            //header at start of line\n            if (stream.match('!!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!')) {\n              return chain(inLine(\"header string\"));\n            } else {\n              return chain(inLine(\"header string\"));\n            }\n\n            break;\n\n          case \"*\": //unordered list line item, or <li /> at start of line\n\n          case \"#\": //ordered list line item, or <li /> at start of line\n\n          case \"+\":\n            //ordered list line item, or <li /> at start of line\n            return chain(inLine(\"tw-listitem bracket\"));\n            break;\n        }\n      } //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki\n\n\n      return null;\n    }\n\n    var indentUnit = config.indentUnit; // Return variables for tokenizers\n\n    var pluginName, type;\n\n    function inPlugin(stream, state) {\n      var ch = stream.next();\n      var peek = stream.peek();\n\n      if (ch == \"}\") {\n        state.tokenize = inText; //type = ch == \")\" ? \"endPlugin\" : \"selfclosePlugin\"; inPlugin\n\n        return \"tag\";\n      } else if (ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n\n        if (peek == \">\") {\n          stream.next();\n          peek = stream.peek();\n        } //here we detect values directly after equal character with no quotes\n\n\n        if (!/[\\'\\\"]/.test(peek)) {\n          state.tokenize = inAttributeNoQuote();\n        } //end detect values\n\n\n        return \"operator\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        return state.tokenize(stream, state);\n      } else {\n        stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?]/);\n        return \"keyword\";\n      }\n    }\n\n    function inAttribute(quote) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    function inAttributeNoQuote() {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          var ch = stream.next();\n          var peek = stream.peek();\n\n          if (ch == \" \" || ch == \",\" || /[ )}]/.test(peek)) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    var curState, setStyle;\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        curState.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function pushContext(pluginName, startOfLine) {\n      var noIndent = curState.context && curState.context.noIndent;\n      curState.context = {\n        prev: curState.context,\n        pluginName: pluginName,\n        indent: curState.indented,\n        startOfLine: startOfLine,\n        noIndent: noIndent\n      };\n    }\n\n    function popContext() {\n      if (curState.context) curState.context = curState.context.prev;\n    }\n\n    function element(type) {\n      if (type == \"openPlugin\") {\n        curState.pluginName = pluginName;\n        return cont(attributes, endplugin(curState.startOfLine));\n      } else if (type == \"closePlugin\") {\n        var err = false;\n\n        if (curState.context) {\n          err = curState.context.pluginName != pluginName;\n          popContext();\n        } else {\n          err = true;\n        }\n\n        if (err) setStyle = \"error\";\n        return cont(endcloseplugin(err));\n      } else if (type == \"string\") {\n        if (!curState.context || curState.context.name != \"!cdata\") pushContext(\"!cdata\");\n        if (curState.tokenize == inText) popContext();\n        return cont();\n      } else return cont();\n    }\n\n    function endplugin(startOfLine) {\n      return function (type) {\n        if (type == \"selfclosePlugin\" || type == \"endPlugin\") return cont();\n\n        if (type == \"endPlugin\") {\n          pushContext(curState.pluginName, startOfLine);\n          return cont();\n        }\n\n        return cont();\n      };\n    }\n\n    function endcloseplugin(err) {\n      return function (type) {\n        if (err) setStyle = \"error\";\n        if (type == \"endPlugin\") return cont();\n        return pass();\n      };\n    }\n\n    function attributes(type) {\n      if (type == \"keyword\") {\n        setStyle = \"attribute\";\n        return cont(attributes);\n      }\n\n      if (type == \"equals\") return cont(attvalue, attributes);\n      return pass();\n    }\n\n    function attvalue(type) {\n      if (type == \"keyword\") {\n        setStyle = \"string\";\n        return cont();\n      }\n\n      if (type == \"string\") return cont(attvaluemaybe);\n      return pass();\n    }\n\n    function attvaluemaybe(type) {\n      if (type == \"string\") return cont(attvaluemaybe);else return pass();\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: inText,\n          cc: [],\n          indented: 0,\n          startOfLine: true,\n          pluginName: null,\n          context: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.startOfLine = true;\n          state.indented = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        setStyle = type = pluginName = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          curState = state;\n\n          while (true) {\n            var comb = state.cc.pop() || element;\n            if (comb(type || style)) break;\n          }\n        }\n\n        state.startOfLine = false;\n        return setStyle || style;\n      },\n      indent: function indent(state, textAfter) {\n        var context = state.context;\n        if (context && context.noIndent) return 0;\n        if (context && /^{\\//.test(textAfter)) context = context.prev;\n\n        while (context && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return 0;\n      },\n      electricChars: \"/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/tiki\", \"tiki\");\n});"],"sourceRoot":""}