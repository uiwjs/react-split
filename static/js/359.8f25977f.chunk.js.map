{"version":3,"sources":["../node_modules/prismjs/components/prism-soy.js"],"names":["Prism","stringPattern","numberPattern","languages","soy","pattern","lookbehind","greedy","alias","inside","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":"gHAAA,SAAWA,GACT,IAAIC,EAAgB,iDAChBC,EAAgB,oDACpBF,EAAMG,UAAUC,IAAM,CACpB,QAAW,CAAC,mBAAoB,CAC9BC,QAAS,aACTC,YAAY,EACZC,QAAQ,IAEV,cAAe,CACbF,QAAS,yFACTC,YAAY,EACZE,MAAO,SACPC,OAAQ,CACN,YAAe,OAGnB,UAAa,CACXJ,QAAS,mCACTC,YAAY,EACZE,MAAO,YAET,QAAW,CAAC,CACVH,QAAS,kNACTC,YAAY,GACX,2FACH,UAAa,CACXD,QAAS,gBACTG,MAAO,eAET,SAAY,WACZ,SAAY,CACVH,QAAS,0CACTI,OAAQ,CACN,OAAU,CACRJ,QAASJ,EACTM,QAAQ,GAEV,OAAUL,EACV,YAAe,aAGnB,OAAU,CACRG,QAASJ,EACTM,QAAQ,GAEV,SAAY,CAAC,YAAa,CACxBF,QAAS,oBACTC,YAAY,IAEd,QAAW,qBACX,OAAUJ,EACV,SAAY,iDACZ,YAAe,kBAGjBF,EAAMU,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IAGIC,GAAkB,EACtBb,EAAMG,UAAU,qBAAqBW,kBAAkBF,EAAK,MAJ3C,4CAI8D,SAAUG,GAMvF,MARmB,eAIfA,IACFF,GAAkB,IAGfA,IATgB,cAUfE,IACFF,GAAkB,IAGb,SAObb,EAAMU,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CZ,EAAMG,UAAU,qBAAqBa,qBAAqBJ,EAAK,UAhFnE,CAkFGZ","file":"static/js/359.8f25977f.chunk.js","sourcesContent":["(function (Prism) {\n  var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n  Prism.languages.soy = {\n    'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(\\s)\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'command-arg': {\n      pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'parameter': {\n      pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'keyword': [{\n      pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n      lookbehind: true\n    }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n    'delimiter': {\n      pattern: /^{+\\/?|\\/?}+$/,\n      alias: 'punctuation'\n    },\n    'property': /\\w+(?==)/,\n    'variable': {\n      pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n      inside: {\n        'string': {\n          pattern: stringPattern,\n          greedy: true\n        },\n        'number': numberPattern,\n        'punctuation': /[\\[\\].?]/\n      }\n    },\n    'string': {\n      pattern: stringPattern,\n      greedy: true\n    },\n    'function': [/\\w+(?=\\()/, {\n      pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n      lookbehind: true\n    }],\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': numberPattern,\n    'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n    'punctuation': /[{}()\\[\\]|.,:]/\n  }; // Tokenize all inline Soy expressions\n\n  Prism.hooks.add('before-tokenize', function (env) {\n    var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n    var soyLitteralStart = '{literal}';\n    var soyLitteralEnd = '{/literal}';\n    var soyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n      // Soy tags inside {literal} block are ignored\n      if (match === soyLitteralEnd) {\n        soyLitteralMode = false;\n      }\n\n      if (!soyLitteralMode) {\n        if (match === soyLitteralStart) {\n          soyLitteralMode = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }); // Re-insert the tokens after tokenizing\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n  });\n})(Prism);"],"sourceRoot":""}