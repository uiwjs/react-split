{"version":3,"sources":["../node_modules/codemirror/mode/asn.1/asn.1.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name","mod"],"mappings":"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","file":"static/js/31.e983c205.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" + \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" + \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" + \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" + \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" + \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" + \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" + \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" + \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" + \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" + \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" + \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" + \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" + \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" + \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" + \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" + \" TruthValue RowStatus DisplayString GeneralString\" + \" GraphicString IA5String NumericString\" + \" PrintableString SnmpAdminAtring TeletexString\" + \" UTF8String VideotexString VisibleString StringStore\" + \" ISO646String T61String UniversalString Unsigned32\" + \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" + \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" + \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" + \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});"],"sourceRoot":""}