{"version":3,"sources":["../node_modules/codemirror/mode/http/http.js"],"names":["CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEAA,EAAWC,WAAW,QAAQ,WAC5B,SAASC,EAAcC,EAAQC,GAG7B,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,QAGT,SAASC,EAAML,EAAQC,GACrB,OAAID,EAAOM,MAAM,kBACfL,EAAME,IAAMI,EACL,WACEP,EAAOM,MAAM,YAAc,QAAQE,KAAKR,EAAOS,SACxDR,EAAME,IAAMO,EACL,WAEAX,EAAcC,EAAQC,GAIjC,SAASM,EAAmBP,EAAQC,GAClC,IAAIU,EAAOX,EAAOM,MAAM,QACxB,IAAKK,EAAM,OAAOZ,EAAcC,EAAQC,GACxCA,EAAME,IAAMS,EACZ,IAAIC,EAASC,OAAOH,EAAK,IAEzB,OAAIE,GAAU,KAAOA,EAAS,IACrB,yBACEA,GAAU,KAAOA,EAAS,IAC5B,mBACEA,GAAU,KAAOA,EAAS,IAC5B,oBACEA,GAAU,KAAOA,EAAS,IAC5B,wBACEA,GAAU,KAAOA,EAAS,IAC5B,wBAEA,QAIX,SAASD,EAAmBZ,EAAQC,GAGlC,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,KAGT,SAASM,EAAYV,EAAQC,GAG3B,OAFAD,EAAOe,SAAS,MAChBd,EAAME,IAAMa,EACL,WAGT,SAASA,EAAgBhB,EAAQC,GAC/B,OAAID,EAAOM,MAAM,mBACfL,EAAME,IAAMC,EACL,WAEAL,EAAcC,EAAQC,GAIjC,SAASG,EAAOJ,GACd,OAAIA,EAAOiB,QAAUjB,EAAOkB,IAAI,SAC1BlB,EAAOM,MAAM,SACR,QAEPN,EAAOE,YACA,UAGTF,EAAOE,YACA,UAIX,SAASiB,EAAKnB,GAEZ,OADAA,EAAOE,YACA,KAGT,MAAO,CACLkB,MAAO,SAAepB,EAAQC,GAC5B,IAAIE,EAAMF,EAAME,IAChB,OAAIA,GAAOC,GAAUD,GAAOgB,GAAQnB,EAAOqB,WAAmB,KACvDlB,EAAIH,EAAQC,IAErBqB,UAAW,SAAmBrB,GAC5BA,EAAME,IAAMgB,GAEdI,WAAY,WACV,MAAO,CACLpB,IAAKE,QAKbR,EAAW2B,WAAW,eAAgB,QAtGpCC,CAAI,EAAQ","file":"static/js/480.d227e593.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"http\", function () {\n    function failFirstLine(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return \"error\";\n    }\n\n    function start(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n        state.cur = responseStatusCode;\n        return \"keyword\";\n      } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n        state.cur = requestPath;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n\n    function responseStatusCode(stream, state) {\n      var code = stream.match(/^\\d+/);\n      if (!code) return failFirstLine(stream, state);\n      state.cur = responseStatusText;\n      var status = Number(code[0]);\n\n      if (status >= 100 && status < 200) {\n        return \"positive informational\";\n      } else if (status >= 200 && status < 300) {\n        return \"positive success\";\n      } else if (status >= 300 && status < 400) {\n        return \"positive redirect\";\n      } else if (status >= 400 && status < 500) {\n        return \"negative client-error\";\n      } else if (status >= 500 && status < 600) {\n        return \"negative server-error\";\n      } else {\n        return \"error\";\n      }\n    }\n\n    function responseStatusText(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return null;\n    }\n\n    function requestPath(stream, state) {\n      stream.eatWhile(/\\S/);\n      state.cur = requestProtocol;\n      return \"string-2\";\n    }\n\n    function requestProtocol(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n        state.cur = header;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n\n    function header(stream) {\n      if (stream.sol() && !stream.eat(/[ \\t]/)) {\n        if (stream.match(/^.*?:/)) {\n          return \"atom\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else {\n        stream.skipToEnd();\n        return \"string\";\n      }\n    }\n\n    function body(stream) {\n      stream.skipToEnd();\n      return null;\n    }\n\n    return {\n      token: function token(stream, state) {\n        var cur = state.cur;\n        if (cur != header && cur != body && stream.eatSpace()) return null;\n        return cur(stream, state);\n      },\n      blankLine: function blankLine(state) {\n        state.cur = body;\n      },\n      startState: function startState() {\n        return {\n          cur: start\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"message/http\", \"http\");\n});"],"sourceRoot":""}