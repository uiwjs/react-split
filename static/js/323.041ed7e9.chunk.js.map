{"version":3,"sources":["../node_modules/prismjs/components/prism-regex.js"],"names":["Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","range","RegExp","groupName","lookbehind","backreference","inside","languages","regex","forEach","lang","grammar"],"mappings":"gHAAA,SAAWA,GACT,IAAIC,EAAgB,CAClBC,QAAS,uBACTC,MAAO,UAELC,EAAS,6FACTC,EAAY,0BACZC,EAAY,eAAiBF,EAAOG,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GAEjCI,EAAY,CACdR,QAAS,wBACTS,YAAY,EACZR,MAAO,YAELS,EAAgB,CAAC,2BACrB,CACEV,QAAS,eACTW,OAAQ,CACN,aAAcH,KAGlBV,EAAMc,UAAUC,MAAQ,CACtB,QAAW,CACTb,QAAS,kDACTS,YAAY,EACZE,OAAQ,CACN,mBAAoB,CAClBX,QAAS,UACTS,YAAY,GAEd,sBAAuB,UACvB,MAAS,CACPT,QAASM,EACTK,OAAQ,CACN,OAAUT,EACV,oBAAqB,MAGzB,iBAAkBH,EAClB,UAAaI,EACb,cAAiBO,EACjB,OAAUR,IAGd,iBAAkBH,EAClB,UAAaI,EACb,cAAiBO,EACjB,OAAU,kBACV,OAAUR,EACV,MAAS,CAAC,CAIRF,QAAS,8EACTW,OAAQ,CACN,aAAcH,IAEf,MACH,WAAc,yBACd,YAAe,MAEjB,CAAC,eAAgB,cAAe,OAAQ,aAAc,aAAc,QAAQM,SAAQ,SAAUC,GAC5F,IAAIC,EAAUlB,EAAMc,UAAUG,GAE1BC,IACFA,EAAe,MAAEL,OAAS,CACxB,cAAe,UACf,kBAAmB,UACnB,iBAAkB,CAChBX,QAAS,UACTW,OAAQb,EAAMc,UAAUC,YAvElC,CA4EGf","file":"static/js/323.041ed7e9.chunk.js","sourcesContent":["(function (Prism) {\n  var specialEscape = {\n    pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n    alias: 'escape'\n  };\n  var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n  var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i;\n  var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n  var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n  var groupName = {\n    pattern: /(<|')[^<>']+(?=[>']$)/,\n    lookbehind: true,\n    alias: 'variable'\n  };\n  var backreference = [/\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n  {\n    pattern: /\\\\k<[^<>']+>/,\n    inside: {\n      'group-name': groupName\n    }\n  }];\n  Prism.languages.regex = {\n    'charset': {\n      pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n      lookbehind: true,\n      inside: {\n        'charset-negation': {\n          pattern: /(^\\[)\\^/,\n          lookbehind: true\n        },\n        'charset-punctuation': /^\\[|\\]$/,\n        'range': {\n          pattern: range,\n          inside: {\n            'escape': escape,\n            'range-punctuation': /-/\n          }\n        },\n        'special-escape': specialEscape,\n        'charclass': charClass,\n        'backreference': backreference,\n        'escape': escape\n      }\n    },\n    'special-escape': specialEscape,\n    'charclass': charClass,\n    'backreference': backreference,\n    'anchor': /[$^]|\\\\[ABbGZz]/,\n    'escape': escape,\n    'group': [{\n      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n      pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n      inside: {\n        'group-name': groupName\n      }\n    }, /\\)/],\n    'quantifier': /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n    'alternation': /\\|/\n  };\n  ['actionscript', 'coffescript', 'flow', 'javascript', 'typescript', 'vala'].forEach(function (lang) {\n    var grammar = Prism.languages[lang];\n\n    if (grammar) {\n      grammar['regex'].inside = {\n        'regex-flags': /[a-z]+$/,\n        'regex-delimiter': /^\\/|\\/$/,\n        'language-regex': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.regex\n        }\n      };\n    }\n  });\n})(Prism);"],"sourceRoot":""}