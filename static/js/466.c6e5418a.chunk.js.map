{"version":3,"sources":["../node_modules/codemirror/mode/ebnf/ebnf.js"],"names":["CodeMirror","defineMode","config","commentType","stateType","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME","mod"],"mappings":"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","file":"static/js/466.c6e5418a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {\n      slash: 0,\n      parenthesis: 1\n    };\n    var stateType = {\n      comment: 0,\n      _string: 1,\n      characterClass: 2\n    };\n    var bracesMode = null;\n    if (config.bracesMode) bracesMode = CodeMirror.getMode(config, config.bracesMode);\n    return {\n      startState: function startState() {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function token(stream, state) {\n        if (!stream) return; //check for state changes\n\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n\n            state.stack.unshift(stateType._string);\n          } else if (stream.match(/^\\/\\*/)) {\n            //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match(/^\\(\\*/)) {\n            //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        } //return state\n        //stack has\n\n\n        switch (state.stack[0]) {\n          case stateType._string:\n            while (state.stack[0] === stateType._string && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n\n            return state.lhs ? \"property string\" : \"string\";\n          // Token style\n\n          case stateType.comment:\n            while (state.stack[0] === stateType.comment && !stream.eol()) {\n              if (state.commentType === commentType.slash && stream.match(/\\*\\//)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else if (state.commentType === commentType.parenthesis && stream.match(/\\*\\)/)) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else {\n                stream.match(/^.[^\\*]*/);\n              }\n            }\n\n            return \"comment\";\n\n          case stateType.characterClass:\n            while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n                state.stack.shift();\n              }\n            }\n\n            return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null) state.localState = CodeMirror.startState(bracesMode);\n          var token = bracesMode.token(stream, state.localState),\n              text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n\n          return token;\n        } //no stack\n\n\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(stateType.characterClass);\n            return \"bracket\";\n\n          case \":\":\n          case \"|\":\n          case \";\":\n            stream.next();\n            return \"operator\";\n\n          case \"%\":\n            if (stream.match(\"%%\")) {\n              return \"header\";\n            } else if (stream.match(/[%][A-Za-z]+/)) {\n              return \"keyword\";\n            } else if (stream.match(/[%][}]/)) {\n              return \"matchingbracket\";\n            }\n\n            break;\n\n          case \"/\":\n            if (stream.match(/[\\/][A-Za-z]+/)) {\n              return \"keyword\";\n            }\n\n          case \"\\\\\":\n            if (stream.match(/[\\][a-z]+/)) {\n              return \"string-2\";\n            }\n\n          case \".\":\n            if (stream.match(\".\")) {\n              return \"atom\";\n            }\n\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n            if (stream.match(peek)) {\n              return \"atom\";\n            }\n\n          case \"$\":\n            if (stream.match(\"$$\")) {\n              return \"builtin\";\n            } else if (stream.match(/[$][0-9]+/)) {\n              return \"variable-3\";\n            }\n\n          case \"<\":\n            if (stream.match(/<<[a-zA-Z_]+>>/)) {\n              return \"builtin\";\n            }\n\n        }\n\n        if (stream.match(/^\\/\\//)) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(/return/)) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});"],"sourceRoot":""}