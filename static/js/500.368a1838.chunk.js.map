{"version":3,"sources":["../node_modules/codemirror/mode/pig/pig.js"],"names":["CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","ch","isEnd","next","tokenBase","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper","mod"],"mappings":"mHAcG,SAAUA,GACX,aAEAA,EAAWC,WAAW,OAAO,SAAUC,EAASC,GAC9C,IAAIC,EAAWD,EAAaC,SACxBC,EAAWF,EAAaE,SACxBC,EAAQH,EAAaG,MACrBC,EAAmBJ,EAAaI,iBAChCC,EAAiB,oBAErB,SAASC,EAAMC,EAAQC,EAAOC,GAE5B,OADAD,EAAME,SAAWD,EACVA,EAAEF,EAAQC,GAGnB,SAASG,EAAaJ,EAAQC,GAI5B,IAHA,IACII,EADAC,GAAQ,EAGLD,EAAKL,EAAOO,QAAQ,CACzB,GAAU,KAANF,GAAaC,EAAO,CACtBL,EAAME,SAAWK,EACjB,MAGFF,EAAc,KAAND,EAGV,MAAO,UAuBT,SAASG,EAAUR,EAAQC,GACzB,IArBmBQ,EAqBfJ,EAAKL,EAAOO,OAEhB,MAAU,KAANF,GAAmB,KAANA,EAAkBN,EAAMC,EAAQC,GAvB9BQ,EAuBiDJ,EAtB7D,SAAUL,EAAQC,GAKvB,IAJA,IACIM,EADAG,GAAU,EAEVC,GAAM,EAEuB,OAAzBJ,EAAOP,EAAOO,SAAiB,CACrC,GAAIA,GAAQE,IAAUC,EAAS,CAC7BC,GAAM,EACN,MAGFD,GAAWA,GAAmB,MAARH,EAIxB,OADII,IAASD,IAAWb,KAAmBI,EAAME,SAAWK,GACrD,WAQA,mBAAmBI,KAAKP,GAAY,KAClC,KAAKO,KAAKP,IACfL,EAAOa,SAAS,UACT,UAEM,KAANR,EACDL,EAAOc,IAAI,KACNf,EAAMC,EAAQC,EAAOG,IAE5BJ,EAAOa,SAASf,GACT,YAGI,KAANO,EACDL,EAAOc,IAAI,MACbd,EAAOe,YACA,YAEPf,EAAOa,SAASf,GACT,YAGFA,EAAec,KAAKP,IACzBL,EAAOa,SAASf,GACT,aAGPE,EAAOa,SAAS,WAEZnB,GAAYA,EAASsB,qBAAqBhB,EAAOiB,UAAUC,iBAExDlB,EAAOc,IAAI,OAASd,EAAOc,IAAI,KAAa,UAI/CnB,GAAYA,EAASqB,qBAAqBhB,EAAOiB,UAAUC,eAAuB,aAElFtB,GAASA,EAAMoB,qBAAqBhB,EAAOiB,UAAUC,eAAuB,aAEzE,YAKrB,MAAO,CACLC,WAAY,WACV,MAAO,CACLhB,SAAUK,EACVY,aAAa,IAGjBC,MAAO,SAAerB,EAAQC,GAC5B,OAAID,EAAOsB,WAAmB,KAClBrB,EAAME,SAASH,EAAQC,QAMzC,WACE,SAASP,EAAS6B,GAIhB,IAHA,IAAIC,EAAM,GACNC,EAAQF,EAAIG,MAAM,KAEbC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAClCH,EAAIC,EAAME,KAAM,EAGlB,OAAOH,EAIT,IAAIK,EAAY,w3BAEZC,EAAY,mXAEZC,EAAS,mEACbzC,EAAW0C,WAAW,aAAc,CAClCC,KAAM,MACNtC,SAAUD,EAASmC,GACnBnC,SAAUA,EAASoC,GACnBlC,MAAOF,EAASqC,KAElBzC,EAAW4C,eAAe,YAAa,OAAQL,EAAYE,EAASD,GAAWJ,MAAM,MAxBvF,GArHES,CAAI,EAAQ","file":"static/js/500.368a1838.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pig\", function (_config, parserConfig) {\n    var keywords = parserConfig.keywords,\n        builtins = parserConfig.builtins,\n        types = parserConfig.types,\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenComment(stream, state) {\n      var isEnd = false;\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && isEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        isEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"error\";\n      };\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next(); // is a start of string?\n\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch)); // is it one of the special chars\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null; // is it a number?\n        else if (/\\d/.test(ch)) {\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n          } // multi line comment or operator\n          else if (ch == \"/\") {\n              if (stream.eat(\"*\")) {\n                return chain(stream, state, tokenComment);\n              } else {\n                stream.eatWhile(isOperatorChar);\n                return \"operator\";\n              }\n            } // single line comment or operator\n            else if (ch == \"-\") {\n                if (stream.eat(\"-\")) {\n                  stream.skipToEnd();\n                  return \"comment\";\n                } else {\n                  stream.eatWhile(isOperatorChar);\n                  return \"operator\";\n                }\n              } // is it an operator\n              else if (isOperatorChar.test(ch)) {\n                  stream.eatWhile(isOperatorChar);\n                  return \"operator\";\n                } else {\n                  // get the while word\n                  stream.eatWhile(/[\\w\\$_]/); // is it one of the listed keywords?\n\n                  if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n                    //keywords can be used as variables like flatten(group), group.$0 etc..\n                    if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n                  } // is it one of the builtin functions?\n\n\n                  if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-2\"; // is it one of the listed types?\n\n                  if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-3\"; // default is a 'variable'\n\n                  return \"variable\";\n                }\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n\n  (function () {\n    function keywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    } // builtin funcs taken from trunk revision 1303237\n\n\n    var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \"; // taken from QueryLexer.g\n\n    var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\"; // data types\n\n    var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n    CodeMirror.defineMIME(\"text/x-pig\", {\n      name: \"pig\",\n      builtins: keywords(pBuiltins),\n      keywords: keywords(pKeywords),\n      types: keywords(pTypes)\n    });\n    CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n  })();\n});"],"sourceRoot":""}