{"version":3,"sources":["../node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],"names":["CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEA,SAASC,EAAgBC,GACvB,IAAIC,EAAQD,EAAOE,MAAM,UAEzB,OADAF,EAAOG,YACAF,EAAQ,QAAU,KAG3BH,EAAWM,WAAW,cAAc,WAClC,MAAO,CACLC,MAAO,SAAeL,EAAQM,GAC5B,IAAIC,EAEJ,GAAmB,OAAfD,EAAMA,MACR,OAAIN,EAAOQ,QAAUD,EAAIP,EAAOE,MAAM,gCACpCI,EAAMA,MAAQ,UACdA,EAAMG,KAAOF,EAAE,GACR,OAGFR,EAAgBC,GAClB,GAAmB,WAAfM,EAAMA,MAAoB,CACnC,GAAIN,EAAOQ,OAASR,EAAOE,MAAM,SAE/B,OADAI,EAAMA,MAAQ,SACP,OAEP,IAAII,EAASX,EAAgBC,GAE7B,OADIU,IAAQJ,EAAMA,MAAQ,QACnBI,EAEJ,MAAmB,UAAfJ,EAAMA,OACfN,EAAOG,YACPG,EAAMA,MAAQ,UACP,UACiB,QAAfA,EAAMA,MACXN,EAAOQ,QAAUD,EAAIP,EAAOE,MAAM,6BAChCK,EAAE,IAAMD,EAAMG,KAAa,SAC/BH,EAAMA,MAAQ,MACP,OAEHN,EAAOW,SAAS,mBACX,MAEPX,EAAOY,OACA,SAGa,OAAfN,EAAMA,MACRP,EAAgBC,QADlB,GAITa,UAAW,SAAmBP,GACT,WAAfA,EAAMA,QAAoBA,EAAMA,MAAQ,SAE9CQ,WAAY,WACV,MAAO,CACLR,MAAO,MACPG,KAAM,WAKdX,EAAWiB,WAAW,kBAAmB,cACzCjB,EAAWiB,WAAW,4BAA6B,cACnDjB,EAAWiB,WAAW,uBAAwB,cAC9CjB,EAAWiB,WAAW,4BAA6B,cArEjDC,CAAI,EAAQ","file":"static/js/450.f756757c.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function () {\n    return {\n      token: function token(stream, state) {\n        var m;\n\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function blankLine(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function startState() {\n        return {\n          state: \"top\",\n          type: null\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});"],"sourceRoot":""}