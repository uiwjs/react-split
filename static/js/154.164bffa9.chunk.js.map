{"version":3,"sources":["../node_modules/prismjs/components/prism-haxe.js"],"names":["Prism","languages","haxe","extend","pattern","greedy","inside","lookbehind","alias","insertBefore","rest"],"mappings":"+GAAAA,MAAMC,UAAUC,KAAOF,MAAMC,UAAUE,OAAO,QAAS,CAErD,OAAU,CACRC,QAAS,oCACTC,QAAQ,EACRC,OAAQ,CACN,cAAiB,CACfF,QAAS,+BACTG,YAAY,EACZD,OAAQ,CACN,cAAiB,CACfF,QAAS,SACTI,MAAO,gBAQjB,QAAW,wRACX,SAAY,+DAEdR,MAAMC,UAAUQ,aAAa,OAAQ,aAAc,CACjD,MAAS,CACPL,QAAS,oCACTC,QAAQ,KAGZL,MAAMC,UAAUQ,aAAa,OAAQ,UAAW,CAC9C,aAAgB,CACdL,QAAS,OACTI,MAAO,WAET,SAAY,CACVJ,QAAS,SACTI,MAAO,UAET,YAAe,CACbJ,QAAS,mBACTI,MAAO,cAGXR,MAAMC,UAAUC,KAAa,OAAEI,OAAsB,cAAEA,OAAOI,KAAOV,MAAMC,UAAUC,YAC9EF,MAAMC,UAAUC,KAAK","file":"static/js/154.164bffa9.chunk.js","sourcesContent":["Prism.languages.haxe = Prism.languages.extend('clike', {\n  // Strings can be multi-line\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n        lookbehind: true,\n        inside: {\n          'interpolation': {\n            pattern: /^\\$\\w*/,\n            alias: 'variable'\n          } // See rest below\n\n        }\n      }\n    }\n  },\n  // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n  'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n  'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n  'regex': {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n    greedy: true\n  }\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n  'preprocessor': {\n    pattern: /#\\w+/,\n    alias: 'builtin'\n  },\n  'metadata': {\n    pattern: /@:?\\w+/,\n    alias: 'symbol'\n  },\n  'reification': {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: 'variable'\n  }\n});\nPrism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\ndelete Prism.languages.haxe['class-name'];"],"sourceRoot":""}