{"version":3,"sources":["../node_modules/prismjs/components/prism-xquery.js"],"names":["Prism","languages","xquery","extend","pattern","greedy","alias","lookbehind","tag","inside","stringifyToken","token","content","map","join","hooks","add","env","language","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","test","Token"],"mappings":"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","file":"static/js/419.4012cb2a.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.xquery = Prism.languages.extend('markup', {\n    'xquery-comment': {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: true,\n      alias: \"comment\"\n    },\n    'string': {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: true\n    },\n    'extension': {\n      pattern: /\\(#.+?#\\)/,\n      alias: 'symbol'\n    },\n    'variable': /\\$[\\w-:]+/,\n    'axis': {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword-operator': {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword': {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    'xquery-element': {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'tag'\n    },\n    'xquery-attribute': {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    'builtin': {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    'operator': [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }],\n    'punctuation': /[[\\](){},;:/]/\n  });\n  Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n    // Allow for two levels of nesting\n    pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n    inside: Prism.languages.xquery,\n    alias: 'language-xquery'\n  }; // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n            } else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && ( // Ignore `{{`\n        !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {\n          // Here we might have entered an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else if (token.type !== 'comment') {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside an XQuery expression.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          if (/^\\s+$/.test(plainText)) {\n            tokens[i] = plainText;\n          } else {\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'xquery') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);"],"sourceRoot":""}