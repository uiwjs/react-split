{"version":3,"sources":["../node_modules/prismjs/components/prism-lilypond.js"],"names":["Prism","schemeExpression","source","i","replace","lilypond","languages","pattern","RegExp","lookbehind","greedy","inside","alias","rest","scheme","ly"],"mappings":"gHAAA,SAAWA,GAMT,IALA,IAAIC,EAAmB,8FAA8FC,OAK5GC,EAAI,EAAGA,EAFQ,EAEeA,IACrCF,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,OAAOH,KAIXA,EAAmBA,EAAiBG,QAAQ,UAAW,UAAUF,QACjE,IAAIG,EAAWL,EAAMM,UAAUD,SAAW,CACxC,QAAW,8BACX,kBAAmB,CACjBE,QAASC,OAAO,8DAA8DN,OAAOE,QAAQ,WAAW,WACtG,OAAOH,KACL,KACJQ,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACN,OAAU,CACRJ,QAAS,eACTE,YAAY,EACZG,MAAO,kBACPD,OAAQ,CACN,oBAAqB,CACnBJ,QAAS,iBACTG,QAAQ,EACRC,OAAQ,CACN,YAAe,YACf,SAAY,CACVJ,QAAS,UACTK,MAAO,oBACPD,OAAQ,QAKdE,KAAMb,EAAMM,UAAUQ,SAG1B,YAAe,MAGnB,OAAU,CACRP,QAAS,oBACTG,QAAQ,GAEV,aAAc,CACZH,QAAS,mBACTE,YAAY,GAEd,QAAW,CACTF,QAAS,iBACTI,OAAQ,CACN,YAAe,QAGnB,SAAY,aACZ,YAAe,CACbJ,QAAS,uGACTE,YAAY,GAEd,OAAU,qBAEZJ,EAAS,mBAAmBM,OAAe,OAAEA,OAAO,qBAAqBA,OAAiB,SAAEA,OAASN,EACrGL,EAAMM,UAAUS,GAAKV,EApEvB,CAqEGL","file":"static/js/216.cb8fa0c1.chunk.js","sourcesContent":["(function (Prism) {\n  var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n  // For some reason, this can't be 4\n\n  var recursivenessLog2 = 5;\n\n  for (var i = 0; i < recursivenessLog2; i++) {\n    schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n      return schemeExpression;\n    });\n  }\n\n  schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n  var lilypond = Prism.languages.lilypond = {\n    'comment': /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n    'embedded-scheme': {\n      pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () {\n        return schemeExpression;\n      }), 'm'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'scheme': {\n          pattern: /^(#)[\\s\\S]+$/,\n          lookbehind: true,\n          alias: 'language-scheme',\n          inside: {\n            'embedded-lilypond': {\n              pattern: /#\\{[\\s\\S]*?#\\}/,\n              greedy: true,\n              inside: {\n                'punctuation': /^#\\{|#\\}$/,\n                'lilypond': {\n                  pattern: /[\\s\\S]+/,\n                  alias: 'language-lilypond',\n                  inside: null // see below\n\n                }\n              }\n            },\n            rest: Prism.languages.scheme\n          }\n        },\n        'punctuation': /#/\n      }\n    },\n    'string': {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\\\new\\s+)[\\w-]+/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /\\\\[a-z][-\\w]*/i,\n      inside: {\n        'punctuation': /^\\\\/\n      }\n    },\n    'operator': /[=|]|<<|>>/,\n    'punctuation': {\n      pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n      lookbehind: true\n    },\n    'number': /\\b\\d+(?:\\/\\d+)?\\b/\n  };\n  lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n  Prism.languages.ly = lilypond;\n})(Prism);"],"sourceRoot":""}