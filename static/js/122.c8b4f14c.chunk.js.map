{"version":3,"sources":["../node_modules/prismjs/components/prism-fortran.js"],"names":["Prism","languages","fortran","pattern","alias","inside","lookbehind","greedy"],"mappings":"+GAAAA,MAAMC,UAAUC,QAAU,CACxB,gBAAiB,CACfC,QAAS,0BACTC,MAAO,UAET,OAAU,CACRD,QAAS,gFACTE,OAAQ,CACN,QAAW,CACTF,QAAS,wBACTG,YAAY,KAIlB,QAAW,CACTH,QAAS,MACTI,QAAQ,GAEV,QAAW,+BACX,OAAU,yDACV,QAAW,CACX,oEACA,gIACA,4VACA,+JACA,SAAY,CAAC,mGAAoG,CAE/GJ,QAAS,sBACTG,YAAY,IAEd,YAAe","file":"static/js/122.c8b4f14c.chunk.js","sourcesContent":["Prism.languages.fortran = {\n  'quoted-number': {\n    pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n    alias: 'number'\n  },\n  'string': {\n    pattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,\n    inside: {\n      'comment': {\n        pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n        lookbehind: true\n      }\n    }\n  },\n  'comment': {\n    pattern: /!.*/,\n    greedy: true\n  },\n  'boolean': /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n  'keyword': [// Types\n  /\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i, // END statements\n  /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\n  /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\n  /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],\n  'operator': [/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i, {\n    // Use lookbehind to prevent confusion with (/ /)\n    pattern: /(^|(?!\\().)\\/(?!\\))/,\n    lookbehind: true\n  }],\n  'punctuation': /\\(\\/|\\/\\)|[(),;:&]/\n};"],"sourceRoot":""}