{"version":3,"sources":["../node_modules/codemirror/mode/q/q.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","keywords","RegExp","join","E","tokenBase","stream","state","sol","c","next","tokenize","tokenLineComment","eol","test","peek","skipToEnd","current","tokenCommentToEOF","tokenString","eatWhile","t","backUp","match","tokenBlockComment","f","escaped","end","pushContext","type","col","context","prev","indent","popContext","startState","token","align","indentation","style","column","textAfter","firstChar","charAt","closing","defineMIME","mod"],"mappings":"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","file":"static/js/506.e6477d8d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"q\", function (config) {\n    var indentUnit = config.indentUnit,\n        curPunc,\n        keywords = buildRE([\"abs\", \"acos\", \"aj\", \"aj0\", \"all\", \"and\", \"any\", \"asc\", \"asin\", \"asof\", \"atan\", \"attr\", \"avg\", \"avgs\", \"bin\", \"by\", \"ceiling\", \"cols\", \"cor\", \"cos\", \"count\", \"cov\", \"cross\", \"csv\", \"cut\", \"delete\", \"deltas\", \"desc\", \"dev\", \"differ\", \"distinct\", \"div\", \"do\", \"each\", \"ej\", \"enlist\", \"eval\", \"except\", \"exec\", \"exit\", \"exp\", \"fby\", \"fills\", \"first\", \"fkeys\", \"flip\", \"floor\", \"from\", \"get\", \"getenv\", \"group\", \"gtime\", \"hclose\", \"hcount\", \"hdel\", \"hopen\", \"hsym\", \"iasc\", \"idesc\", \"if\", \"ij\", \"in\", \"insert\", \"inter\", \"inv\", \"key\", \"keys\", \"last\", \"like\", \"list\", \"lj\", \"load\", \"log\", \"lower\", \"lsq\", \"ltime\", \"ltrim\", \"mavg\", \"max\", \"maxs\", \"mcount\", \"md5\", \"mdev\", \"med\", \"meta\", \"min\", \"mins\", \"mmax\", \"mmin\", \"mmu\", \"mod\", \"msum\", \"neg\", \"next\", \"not\", \"null\", \"or\", \"over\", \"parse\", \"peach\", \"pj\", \"plist\", \"prd\", \"prds\", \"prev\", \"prior\", \"rand\", \"rank\", \"ratios\", \"raze\", \"read0\", \"read1\", \"reciprocal\", \"reverse\", \"rload\", \"rotate\", \"rsave\", \"rtrim\", \"save\", \"scan\", \"select\", \"set\", \"setenv\", \"show\", \"signum\", \"sin\", \"sqrt\", \"ss\", \"ssr\", \"string\", \"sublist\", \"sum\", \"sums\", \"sv\", \"system\", \"tables\", \"tan\", \"til\", \"trim\", \"txf\", \"type\", \"uj\", \"ungroup\", \"union\", \"update\", \"upper\", \"upsert\", \"value\", \"var\", \"view\", \"views\", \"vs\", \"wavg\", \"where\", \"where\", \"while\", \"within\", \"wj\", \"wj1\", \"wsum\", \"xasc\", \"xbar\", \"xcol\", \"xcols\", \"xdesc\", \"xexp\", \"xgroup\", \"xkey\", \"xlog\", \"xprev\", \"xrank\"]),\n        E = /[|/&^!+:\\\\\\-*%$=~#;@><,?_\\'\\\"\\[\\(\\]\\)\\s{}]/;\n\n    function buildRE(w) {\n      return new RegExp(\"^(\" + w.join(\"|\") + \")$\");\n    }\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol(),\n          c = stream.next();\n      curPunc = null;\n      if (sol) if (c == \"/\") return (state.tokenize = tokenLineComment)(stream, state);else if (c == \"\\\\\") {\n        if (stream.eol() || /\\s/.test(stream.peek())) return stream.skipToEnd(), /^\\\\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase, \"comment\";else return state.tokenize = tokenBase, \"builtin\";\n      }\n      if (/\\s/.test(c)) return stream.peek() == \"/\" ? (stream.skipToEnd(), \"comment\") : \"whitespace\";\n      if (c == '\"') return (state.tokenize = tokenString)(stream, state);\n      if (c == '`') return stream.eatWhile(/[A-Za-z\\d_:\\/.]/), \"symbol\";\n\n      if (\".\" == c && /\\d/.test(stream.peek()) || /\\d/.test(c)) {\n        var t = null;\n        stream.backUp(1);\n        if (stream.match(/^\\d{4}\\.\\d{2}(m|\\.\\d{2}([DT](\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)?)?)/) || stream.match(/^\\d+D(\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)/) || stream.match(/^\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?/) || stream.match(/^\\d+[ptuv]{1}/)) t = \"temporal\";else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\\d+[chijn]{1}/) || stream.match(/-?\\d*(\\.\\d*)?(e[+\\-]?\\d+)?(e|f)?/)) t = \"number\";\n        return t && (!(c = stream.peek()) || E.test(c)) ? t : (stream.next(), \"error\");\n      }\n\n      if (/[A-Za-z]|\\./.test(c)) return stream.eatWhile(/[A-Za-z._\\d]/), keywords.test(stream.current()) ? \"keyword\" : \"variable\";\n      if (/[|/&^!+:\\\\\\-*%$=~#;@><\\.,?_\\']/.test(c)) return null;\n      if (/[{}\\(\\[\\]\\)]/.test(c)) return null;\n      return \"error\";\n    }\n\n    function tokenLineComment(stream, state) {\n      return stream.skipToEnd(), /\\/\\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment)(stream, state) : state.tokenize = tokenBase, \"comment\";\n    }\n\n    function tokenBlockComment(stream, state) {\n      var f = stream.sol() && stream.peek() == \"\\\\\";\n      stream.skipToEnd();\n      if (f && /^\\\\\\s*$/.test(stream.current())) state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    function tokenCommentToEOF(stream) {\n      return stream.skipToEnd(), \"comment\";\n    }\n\n    function tokenString(stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (next = stream.next()) {\n        if (next == \"\\\"\" && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (end) state.tokenize = tokenBase;\n      return \"string\";\n    }\n\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        } //if (stream.eatSpace()) return null;\n\n\n        var style = state.tokenize(stream, state);\n\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc == state.context.type) popContext(state);\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") {\n          context = context.prev;\n        }\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-q\", \"q\");\n});"],"sourceRoot":""}