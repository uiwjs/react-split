{"version":3,"sources":["../node_modules/codemirror/mode/properties/properties.js"],"names":["CodeMirror","defineMode","token","stream","state","sol","afterSection","eol","nextMultiline","inMultiline","position","eatSpace","ch","next","skipTo","eat","skipToEnd","startState","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEAA,EAAWC,WAAW,cAAc,WAClC,MAAO,CACLC,MAAO,SAAeC,EAAQC,GAC5B,IAAIC,EAAMF,EAAOE,OAASD,EAAME,aAC5BC,EAAMJ,EAAOI,MAiBjB,GAhBAH,EAAME,cAAe,EAEjBD,IACED,EAAMI,eACRJ,EAAMK,aAAc,EACpBL,EAAMI,eAAgB,GAEtBJ,EAAMM,SAAW,OAIjBH,IAAQH,EAAMI,gBAChBJ,EAAMK,aAAc,EACpBL,EAAMM,SAAW,OAGfL,EACF,KAAOF,EAAOQ,aAGhB,IAAIC,EAAKT,EAAOU,OAEhB,OAAIR,GAAe,MAAPO,GAAqB,MAAPA,GAAqB,MAAPA,EAI7BP,GAAc,MAAPO,GAChBR,EAAME,cAAe,EACrBH,EAAOW,OAAO,KACdX,EAAOY,IAAI,KACJ,UACS,MAAPH,GAAqB,MAAPA,GACvBR,EAAMM,SAAW,QACV,OACS,OAAPE,GAAkC,UAAnBR,EAAMM,UAC1BP,EAAOI,QAGTH,EAAMI,eAAgB,GAInBJ,EAAMM,WAnBXN,EAAMM,SAAW,UACjBP,EAAOa,YACA,YAmBXC,WAAY,WACV,MAAO,CACLP,SAAU,MAEVF,eAAe,EAEfC,aAAa,EAEbH,cAAc,QAMtBN,EAAWkB,WAAW,oBAAqB,cAC3ClB,EAAWkB,WAAW,aAAc,cAtElCC,CAAI,EAAQ","file":"static/js/502.213bf2c7.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"properties\", function () {\n    return {\n      token: function token(stream, state) {\n        var sol = stream.sol() || state.afterSection;\n        var eol = stream.eol();\n        state.afterSection = false;\n\n        if (sol) {\n          if (state.nextMultiline) {\n            state.inMultiline = true;\n            state.nextMultiline = false;\n          } else {\n            state.position = \"def\";\n          }\n        }\n\n        if (eol && !state.nextMultiline) {\n          state.inMultiline = false;\n          state.position = \"def\";\n        }\n\n        if (sol) {\n          while (stream.eatSpace()) {}\n        }\n\n        var ch = stream.next();\n\n        if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n          state.position = \"comment\";\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (sol && ch === \"[\") {\n          state.afterSection = true;\n          stream.skipTo(\"]\");\n          stream.eat(\"]\");\n          return \"header\";\n        } else if (ch === \"=\" || ch === \":\") {\n          state.position = \"quote\";\n          return null;\n        } else if (ch === \"\\\\\" && state.position === \"quote\") {\n          if (stream.eol()) {\n            // end of line?\n            // Multiline value\n            state.nextMultiline = true;\n          }\n        }\n\n        return state.position;\n      },\n      startState: function startState() {\n        return {\n          position: \"def\",\n          // Current position, \"def\", \"quote\" or \"comment\"\n          nextMultiline: false,\n          // Is the next line multiline value\n          inMultiline: false,\n          // Is the current line a multiline value\n          afterSection: false // Did we just open a section\n\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-properties\", \"properties\");\n  CodeMirror.defineMIME(\"text/x-ini\", \"properties\");\n});"],"sourceRoot":""}