{"version":3,"sources":["../node_modules/codemirror/mode/twig/twig.js","../node_modules/codemirror/addon/mode/multiplex.js"],"names":["CodeMirror","defineMode","keywords","operator","sign","atom","number","RegExp","join","startState","token","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","tokenBase","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME","mod","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","innerActive","inner","copyState","curInner","oldContent","this","pos","delimStyle","innerToken","innerStyle","cutOff","Infinity","i","other","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode"],"mappings":"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","file":"static/js/438.edb181bc.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function () {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); //Comment\n\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n\n        return \"comment\"; //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        } //After sign\n\n\n        if (state.sign) {\n          state.sign = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n\n            if (stream.match(number)) {\n              return \"number\";\n            }\n\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n\n          return \"comment\"; //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n\n      stream.next();\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {};\n      },\n      token: function token(stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"twig\", function (config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: /\\{[{#%]/,\n      close: /[}#%]\\}/,\n      mode: twigInner,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function indent(state, textAfter, line) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n      },\n      blankLine: function blankLine(state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function innerMode(state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});"],"sourceRoot":""}