{"version":3,"sources":["../node_modules/prismjs/components/prism-tt2.js"],"names":["Prism","languages","tt2","extend","insertBefore","pattern","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"gHAAA,SAAWA,GACTA,EAAMC,UAAUC,IAAMF,EAAMC,UAAUE,OAAO,QAAS,CACpD,QAAW,sBACX,QAAW,0NACX,YAAe,eAEjBH,EAAMC,UAAUG,aAAa,MAAO,SAAU,CAC5C,SAAY,iDACZ,SAAY,CACVC,QAAS,+CAGbL,EAAMC,UAAUG,aAAa,MAAO,UAAW,CAC7C,UAAa,CACXC,QAAS,sBACTC,MAAO,iBAGXN,EAAMC,UAAUG,aAAa,MAAO,SAAU,CAC5C,uBAAwB,CACtBC,QAAS,gCACTE,QAAQ,EACRD,MAAO,UAET,uBAAwB,CACtBD,QAAS,gCACTE,QAAQ,EACRD,MAAO,SACPE,OAAQ,CACN,SAAY,CACVH,QAAS,wDAMVL,EAAMC,UAAUC,IAAIO,OAC3BT,EAAMU,MAAMC,IAAI,mBAAmB,SAAUC,GAE3CZ,EAAMC,UAAU,qBAAqBY,kBAAkBD,EAAK,MAD3C,sBAGnBZ,EAAMU,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CZ,EAAMC,UAAU,qBAAqBa,qBAAqBF,EAAK,UA1CnE,CA4CGZ","file":"static/js/389.0a8b0745.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.tt2 = Prism.languages.extend('clike', {\n    'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,\n    'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    'punctuation': /[[\\]{},()]/\n  });\n  Prism.languages.insertBefore('tt2', 'number', {\n    'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    'variable': {\n      pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'keyword', {\n    'delimiter': {\n      pattern: /^(?:\\[%|%%)-?|-?%]$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'string', {\n    'single-quoted-string': {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'variable': {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n  delete Prism.languages.tt2.string;\n  Prism.hooks.add('before-tokenize', function (env) {\n    var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n  });\n})(Prism);"],"sourceRoot":""}