{"version":3,"sources":["../node_modules/codemirror/mode/coffeescript/coffeescript.js"],"names":["CodeMirror","defineMode","conf","parserConf","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","atProp","wordOperators","indentKeywords","keywords","concat","stringPrefixes","regexPrefixes","constants","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","tokenFactory","current","prop","next","delimiter","singleline","outclass","eol","eatWhile","eat","singleLineStringErrors","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","startState","basecolumn","token","fillAlign","style","delimiter_index","indexOf","slice","exec","tokenLexer","text","closer","charAt","closes","lineComment","fold","defineMIME","mod"],"mappings":"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","file":"static/js/457.9b398f47.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"coffeescript\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n\n    var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n    var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n    var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n    var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n    var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\", \"isnt\", \"in\", \"instanceof\", \"typeof\"]);\n    var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\", \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n    var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\", \"do\", \"in\", \"of\", \"new\", \"return\", \"then\", \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n    var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n    indentKeywords = wordRegexp(indentKeywords);\n    var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n    var regexPrefixes = /^(\\/{3}|\\/)/;\n    var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n    var constants = wordRegexp(commonConstants); // Tokenizers\n\n    function tokenBase(stream, state) {\n      // Handle scope changes\n      if (stream.sol()) {\n        if (state.scope.align === null) state.scope.align = false;\n        var scopeOffset = state.scope.offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n\n          if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n            return \"indent\";\n          } else if (lineOffset < scopeOffset) {\n            return \"dedent\";\n          }\n\n          return null;\n        } else {\n          if (scopeOffset > 0) {\n            dedent(stream, state);\n          }\n        }\n      }\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle docco title comment (single line)\n\n      if (stream.match(\"####\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Handle multi line comments\n\n\n      if (stream.match(\"###\")) {\n        state.tokenize = longComment;\n        return state.tokenize(stream, state);\n      } // Single line comment\n\n\n      if (ch === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Handle number literals\n\n\n      if (stream.match(/^-?[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^-?\\d+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^-?\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // prevent from getting extra . on 1..\n          if (stream.peek() == \".\") {\n            stream.backUp(1);\n          }\n\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^-?0x[0-9a-f]+/i)) {\n          intLiteral = true;\n        } // Decimal\n\n\n        if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^-?0(?![\\dx])/i)) {\n          intLiteral = true;\n        }\n\n        if (intLiteral) {\n          return \"number\";\n        }\n      } // Handle strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenFactory(stream.current(), false, \"string\");\n        return state.tokenize(stream, state);\n      } // Handle regex literals\n\n\n      if (stream.match(regexPrefixes)) {\n        if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) {\n          // prevent highlight of division\n          state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n          return state.tokenize(stream, state);\n        } else {\n          stream.backUp(1);\n        }\n      } // Handle operators and delimiters\n\n\n      if (stream.match(operators) || stream.match(wordOperators)) {\n        return \"operator\";\n      }\n\n      if (stream.match(delimiters)) {\n        return \"punctuation\";\n      }\n\n      if (stream.match(constants)) {\n        return \"atom\";\n      }\n\n      if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n        return \"property\";\n      }\n\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n\n      if (stream.match(identifiers)) {\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenFactory(delimiter, singleline, outclass) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\/\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n\n            if (singleline && stream.eol()) {\n              return outclass;\n            }\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return outclass;\n          } else {\n            stream.eat(/['\"\\/]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            outclass = ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n\n        return outclass;\n      };\n    }\n\n    function longComment(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^#]/);\n\n        if (stream.match(\"###\")) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        stream.eatWhile(\"#\");\n      }\n\n      return \"comment\";\n    }\n\n    function indent(stream, state, type) {\n      type = type || \"coffee\";\n      var offset = 0,\n          align = false,\n          alignOffset = null;\n\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (scope.type === \"coffee\" || scope.type == \"}\") {\n          offset = scope.offset + conf.indentUnit;\n          break;\n        }\n      }\n\n      if (type !== \"coffee\") {\n        align = null;\n        alignOffset = stream.column() + stream.current().length;\n      } else if (state.scope.align) {\n        state.scope.align = false;\n      }\n\n      state.scope = {\n        offset: offset,\n        type: type,\n        prev: state.scope,\n        align: align,\n        alignOffset: alignOffset\n      };\n    }\n\n    function dedent(stream, state) {\n      if (!state.scope.prev) return;\n\n      if (state.scope.type === \"coffee\") {\n        var _indent = stream.indentation();\n\n        var matched = false;\n\n        for (var scope = state.scope; scope; scope = scope.prev) {\n          if (_indent === scope.offset) {\n            matched = true;\n            break;\n          }\n        }\n\n        if (!matched) {\n          return true;\n        }\n\n        while (state.scope.prev && state.scope.offset !== _indent) {\n          state.scope = state.scope.prev;\n        }\n\n        return false;\n      } else {\n        state.scope = state.scope.prev;\n        return false;\n      }\n    }\n\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle scope changes.\n\n      if (current === \"return\") {\n        state.dedent = true;\n      }\n\n      if ((current === \"->\" || current === \"=>\") && stream.eol() || style === \"indent\") {\n        indent(stream, state);\n      }\n\n      var delimiter_index = \"[({\".indexOf(current);\n\n      if (delimiter_index !== -1) {\n        indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      }\n\n      if (indentKeywords.exec(current)) {\n        indent(stream, state);\n      }\n\n      if (current == \"then\") {\n        dedent(stream, state);\n      }\n\n      if (style === \"dedent\") {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      delimiter_index = \"])}\".indexOf(current);\n\n      if (delimiter_index !== -1) {\n        while (state.scope.type == \"coffee\" && state.scope.prev) {\n          state.scope = state.scope.prev;\n        }\n\n        if (state.scope.type == current) state.scope = state.scope.prev;\n      }\n\n      if (state.dedent && stream.eol()) {\n        if (state.scope.type == \"coffee\" && state.scope.prev) state.scope = state.scope.prev;\n        state.dedent = false;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scope: {\n            offset: basecolumn || 0,\n            type: \"coffee\",\n            prev: null,\n            align: false\n          },\n          prop: false,\n          dedent: 0\n        };\n      },\n      token: function token(stream, state) {\n        var fillAlign = state.scope.align === null && state.scope;\n        if (fillAlign && stream.sol()) fillAlign.align = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\") {\n          if (fillAlign) fillAlign.align = true;\n          state.prop = style == \"punctuation\" && stream.current() == \".\";\n        }\n\n        return style;\n      },\n      indent: function indent(state, text) {\n        if (state.tokenize != tokenBase) return 0;\n        var scope = state.scope;\n        var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n        if (closer) while (scope.type == \"coffee\" && scope.prev) {\n          scope = scope.prev;\n        }\n        var closes = closer && scope.type === text.charAt(0);\n        if (scope.align) return scope.alignOffset - (closes ? 1 : 0);else return (closes ? scope.prev : scope).offset;\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  }); // IANA registered media type\n  // https://www.iana.org/assignments/media-types/\n\n  CodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n});"],"sourceRoot":""}