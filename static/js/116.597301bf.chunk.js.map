{"version":3,"sources":["../node_modules/prismjs/components/prism-factor.js"],"names":["Prism","comment_inside","string_inside","factor","pattern","lookbehind","inside","greedy","alias","number","escape","str","replace","arrToWordsRegExp","arr","RegExp","map","join","builtins","Object","keys","forEach","k","combinators","languages"],"mappings":"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","file":"static/js/116.597301bf.chunk.js","sourcesContent":["(function (Prism) {\n  var comment_inside = {\n    'function': /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n  };\n  var string_inside = {\n    'number': /\\\\[^\\s']|%\\w/\n  };\n  var factor = {\n    'comment': [{\n      // ! single-line exclamation point comments with whitespace after/around the !\n      pattern: /(^|\\s)(?:! .*|!$)/,\n      lookbehind: true,\n      inside: comment_inside\n    },\n    /* from basis/multiline: */\n    {\n      // /* comment */, /* comment*/\n      pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }, {\n      // ![[ comment ]] , ![===[ comment]===]\n      pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      inside: comment_inside\n    }],\n    'number': [{\n      // basic base 10 integers 9, -9\n      pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n      pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n      pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // positive mixed numbers 23+1/5 +23+1/5\n      pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // negative mixed numbers -23-1/5\n      pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n      // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n      pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n      lookbehind: true\n    }, {\n      // NAN literal syntax NAN: 80000deadbeef, NAN: a\n      pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n      lookbehind: true\n    }, {\n      /*\n      \tbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n      \t\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n      \tThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n      \t<https://docs.factorcode.org/content/article-syntax-floats.html>\n      */\n      pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n      lookbehind: true\n    }],\n    // R/ regexp?\\/\\\\/\n    'regexp': {\n      pattern: /(^|\\s)R\\/\\s+(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'number',\n      inside: {\n        'variable': /\\\\\\S/,\n        'keyword': /[+?*\\[\\]^$(){}.|]/,\n        'operator': {\n          pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n          lookbehind: true\n        }\n      }\n    },\n    'boolean': {\n      pattern: /(^|\\s)[tf](?=\\s|$)/,\n      lookbehind: true\n    },\n    // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n    'custom-string': {\n      pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': /\\\\\\S|%\\w|\\//\n      }\n    },\n    'multiline-string': [{\n      // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n      pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'number': string_inside.number,\n        // trailing semicolon on its own line\n        'semicolon-or-setlocal': {\n          pattern: /((?:\\n|\\r\\n)\\s*);(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'function'\n        }\n      }\n    }, {\n      // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n      pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }, {\n      // [[ string ]], [==[ string]==]\n      pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string',\n      inside: string_inside\n    }],\n    'special-using': {\n      pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        // this is essentially a regex for vocab names, which i don't want to specify\n        // but the USING: gets picked up as a vocab name\n        'string': {\n          pattern: /(\\s)[^:\\s]+/,\n          lookbehind: true\n        }\n      }\n    },\n\n    /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n    \ttrying to do better is more work and regex-computation-time than it's worth though.\n    \t- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n    \t- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n    \t- we'd like if the following variable name conventions were recognised specifically:\n    \t\tspecial row variables = ..a b..\n    \t\ttype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n    \t\tword throws unconditional error = *\n    \t\tany other word-like variable name = a ? q' etc\n    \t\thttps://docs.factorcode.org/content/article-effects.html\n    \t\tthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\n    \tthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n    */\n    // current solution is not great\n    'stack-effect-delimiter': [{\n      // opening parenthesis\n      pattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // middle --\n      pattern: /(\\s)--(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing parenthesis\n      pattern: /(\\s)\\)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'combinators': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'kernel-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'sequences-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'math-builtin': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'constructor-word': {\n      // <array> but not <=>\n      pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'other-builtin-syntax': {\n      pattern: null,\n      lookbehind: true,\n      alias: 'operator'\n    },\n\n    /*\n    \tfull list of supported word naming conventions: (the convention appears outside of the [brackets])\n    \t\tset-[x]\n    \t\tchange-[x]\n    \t\twith-[x]\n    \t\tnew-[x]\n    \t\t>[string]\n    \t\t[base]>\n    \t\t[string]>[number]\n    \t\t+[symbol]+\n    \t\t[boolean-word]?\n    \t\t?[of]\n    \t\t[slot-reader]>>\n    \t\t>>[slot-setter]\n    \t\t[slot-writer]<<\n    \t\t([implementation-detail])\n    \t\t[mutater]!\n    \t\t[variant]*\n    \t\t[prettyprint].\n    \t\t$[help-markup]\n    \t\t<constructors>, SYNTAX:, etc are supported by their own patterns.\n    \t\t`with` and `new` from `kernel` are their own builtins.\n    \t\tsee <https://docs.factorcode.org/content/article-conventions.html>\n    */\n    'conventionally-named-word': {\n      pattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'colon-syntax': {\n      pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'function'\n    },\n    'semicolon-or-setlocal': {\n      pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n    'curly-brace-literal-delimiter': [{\n      // opening\n      pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\}(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n    'quotation-delimiter': [{\n      // opening\n      pattern: /(^|\\s)\\[(?=\\s)/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // closing\n      pattern: /(\\s)\\](?=\\s|$)/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    'normal-word': {\n      pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n      lookbehind: true\n    },\n\n    /*\n    \tbasic first-class string \"a\"\n    \t\twith escaped double-quote \"a\\\"\"\n    \t\tescaped backslash \"\\\\\"\n    \t\tand general escapes since Factor has so many \"\\N\"\n    \t\tsyntax that works in the reference implementation that isn't fully\n    \tsupported because it's an implementation detail:\n    \t\t\"string 1\"\"string 2\" -> 2 strings (works anyway)\n    \t\t\"string\"5 -> string, 5\n    \t\t\"string\"[ ] -> string, quotation\n    \t\t{ \"a\"} -> array<string>\n    \t\tthe rest of those examples all properly recognise the string, but not\n    \t\tthe other object (number, quotation, etc)\n    \tthis is fine for a regex-only implementation.\n    */\n    'string': {\n      pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n      greedy: true,\n      inside: string_inside\n    }\n  };\n\n  var escape = function escape(str) {\n    return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n  };\n\n  var arrToWordsRegExp = function arrToWordsRegExp(arr) {\n    return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n  };\n\n  var builtins = {\n    'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n    'other-builtin-syntax': [// syntax\n    '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable', // literals\n    '$', '$[', '${'],\n    'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n    'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now\n\n  };\n  Object.keys(builtins).forEach(function (k) {\n    factor[k].pattern = arrToWordsRegExp(builtins[k]);\n  });\n  var combinators = [// kernel\n  '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@', // sequences\n  'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index', // math\n  'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?', // math.combinators\n  'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative', // combinators\n  'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot', // combinators.short-circuit\n  '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&', // combinators.smart\n  'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn\n  ];\n  factor.combinators.pattern = arrToWordsRegExp(combinators);\n  Prism.languages.factor = factor;\n})(Prism);"],"sourceRoot":""}