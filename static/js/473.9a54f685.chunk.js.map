{"version":3,"sources":["../node_modules/codemirror/mode/fortran/fortran.js"],"names":["CodeMirror","defineMode","words","array","keys","i","length","keywords","builtins","dataTypes","isOperatorChar","litOperator","RegExp","tokenBase","stream","state","match","quote","ch","next","skipToEnd","tokenize","escaped","end","test","eatWhile","word","current","toLowerCase","hasOwnProperty","startState","token","eatSpace","style","defineMIME","mod"],"mappings":"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","file":"static/js/473.9a54f685.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fortran\", function () {\n    function words(array) {\n      var keys = {};\n\n      for (var i = 0; i < array.length; ++i) {\n        keys[array[i]] = true;\n      }\n\n      return keys;\n    }\n\n    var keywords = words([\"abstract\", \"accept\", \"allocatable\", \"allocate\", \"array\", \"assign\", \"asynchronous\", \"backspace\", \"bind\", \"block\", \"byte\", \"call\", \"case\", \"class\", \"close\", \"common\", \"contains\", \"continue\", \"cycle\", \"data\", \"deallocate\", \"decode\", \"deferred\", \"dimension\", \"do\", \"elemental\", \"else\", \"encode\", \"end\", \"endif\", \"entry\", \"enumerator\", \"equivalence\", \"exit\", \"external\", \"extrinsic\", \"final\", \"forall\", \"format\", \"function\", \"generic\", \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\", \"inquire\", \"intent\", \"interface\", \"intrinsic\", \"module\", \"namelist\", \"non_intrinsic\", \"non_overridable\", \"none\", \"nopass\", \"nullify\", \"open\", \"optional\", \"options\", \"parameter\", \"pass\", \"pause\", \"pointer\", \"print\", \"private\", \"program\", \"protected\", \"public\", \"pure\", \"read\", \"recursive\", \"result\", \"return\", \"rewind\", \"save\", \"select\", \"sequence\", \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\", \"use\", \"value\", \"volatile\", \"where\", \"while\", \"write\"]);\n    var builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\", \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\", \"all\", \"allocated\", \"alog\", \"amax\", \"amin\", \"amod\", \"and\", \"anint\", \"any\", \"asin\", \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\", \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\", \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\", \"clog\", \"cmplx\", \"command_argument_count\", \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\", \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\", \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\", \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\", \"c_alert\", \"c_backspace\", \"c_form_feed\", \"c_new_line\", \"c_carriage_return\", \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\", \"dacos\", \"dasin\", \"datan\", \"date_and_time\", \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\", \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\", \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\", \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\", \"dot_product\", \"dprod\", \"dsign\", \"dsinh\", \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\", \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\", \"exit\", \"exp\", \"exponent\", \"extends_type_of\", \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\", \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\", \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\", \"get_command\", \"get_command_argument\", \"get_environment_variable\", \"getcwd\", \"getenv\", \"getgid\", \"getlog\", \"getpid\", \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\", \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\", \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\", \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\", \"imagpart\", \"index\", \"int\", \"ior\", \"irand\", \"isatty\", \"ishft\", \"ishftc\", \"isign\", \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\", \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\", \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\", \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\", \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\", \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\", \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\", \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\", \"perror\", \"precision\", \"present\", \"product\", \"radix\", \"rand\", \"random_number\", \"random_seed\", \"range\", \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\", \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\", \"scan\", \"second\", \"selected_int_kind\", \"selected_real_kind\", \"set_exponent\", \"shape\", \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\", \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\", \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\", \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\", \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\", \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\", \"zlog\", \"zsin\", \"zsqrt\"]);\n    var dataTypes = words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\", \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\", \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\", \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\", \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\", \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\", \"c_intptr_t\", \"c_long\", \"c_long_double\", \"c_long_double_complex\", \"c_long_long\", \"c_ptr\", \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\n    var isOperatorChar = /[+\\-*&=<>\\/\\:]/;\n    var litOperator = new RegExp(\"(\\.and\\.|\\.or\\.|\\.eq\\.|\\.lt\\.|\\.le\\.|\\.gt\\.|\\.ge\\.|\\.ne\\.|\\.not\\.|\\.eqv\\.|\\.neqv\\.)\", \"i\");\n\n    function tokenBase(stream, state) {\n      if (stream.match(litOperator)) {\n        return 'operator';\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"!\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\),]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var word = stream.current().toLowerCase();\n\n      if (keywords.hasOwnProperty(word)) {\n        return 'keyword';\n      }\n\n      if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n        return 'builtin';\n      }\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fortran\", \"fortran\");\n});"],"sourceRoot":""}