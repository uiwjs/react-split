{"version":3,"sources":["../node_modules/codemirror/mode/mllike/mllike.js"],"names":["CodeMirror","defineMode","_config","parserConfig","words","extraWords","prop","hasOwnProperty","hintWords","k","push","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","longString","tokenLongString","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","end","escaped","prev","registerHelper","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","mod"],"mappings":"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","file":"static/js/489.5ec810e7.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mllike', function (_config, parserConfig) {\n    var words = {\n      'as': 'keyword',\n      'do': 'keyword',\n      'else': 'keyword',\n      'end': 'keyword',\n      'exception': 'keyword',\n      'fun': 'keyword',\n      'functor': 'keyword',\n      'if': 'keyword',\n      'in': 'keyword',\n      'include': 'keyword',\n      'let': 'keyword',\n      'of': 'keyword',\n      'open': 'keyword',\n      'rec': 'keyword',\n      'struct': 'keyword',\n      'then': 'keyword',\n      'type': 'keyword',\n      'val': 'keyword',\n      'while': 'keyword',\n      'with': 'keyword'\n    };\n    var extraWords = parserConfig.extraWords || {};\n\n    for (var prop in extraWords) {\n      if (extraWords.hasOwnProperty(prop)) {\n        words[prop] = parserConfig.extraWords[prop];\n      }\n    }\n\n    var hintWords = [];\n\n    for (var k in words) {\n      hintWords.push(k);\n    }\n\n    CodeMirror.registerHelper(\"hintWords\", \"mllike\", hintWords);\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      }\n\n      if (ch === '{') {\n        if (stream.eat('|')) {\n          state.longString = true;\n          state.tokenize = tokenLongString;\n          return state.tokenize(stream, state);\n        }\n      }\n\n      if (ch === '(') {\n        if (stream.eat('*')) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      }\n\n      if (ch === '~' || ch === '?') {\n        stream.eatWhile(/\\w/);\n        return 'variable-2';\n      }\n\n      if (ch === '`') {\n        stream.eatWhile(/\\w/);\n        return 'quote';\n      }\n\n      if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (/\\d/.test(ch)) {\n        if (ch === '0' && stream.eat(/[bB]/)) {\n          stream.eatWhile(/[01]/);\n        }\n\n        if (ch === '0' && stream.eat(/[xX]/)) {\n          stream.eatWhile(/[0-9a-fA-F]/);\n        }\n\n        if (ch === '0' && stream.eat(/[oO]/)) {\n          stream.eatWhile(/[0-7]/);\n        } else {\n          stream.eatWhile(/[\\d_]/);\n\n          if (stream.eat('.')) {\n            stream.eatWhile(/[\\d]/);\n          }\n\n          if (stream.eat(/[eE]/)) {\n            stream.eatWhile(/[\\d\\-+]/);\n          }\n        }\n\n        return 'number';\n      }\n\n      if (/[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n        return 'operator';\n      }\n\n      if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        var cur = stream.current();\n        return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n      }\n\n      return null;\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'comment';\n    }\n\n    function tokenLongString(stream, state) {\n      var prev, next;\n\n      while (state.longString && (next = stream.next()) != null) {\n        if (prev === '|' && next === '}') state.longString = false;\n        prev = next;\n      }\n\n      if (!state.longString) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0,\n          longString: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: parserConfig.slashComments ? \"//\" : null\n    };\n  });\n  CodeMirror.defineMIME('text/x-ocaml', {\n    name: 'mllike',\n    extraWords: {\n      'and': 'keyword',\n      'assert': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'constraint': 'keyword',\n      'done': 'keyword',\n      'downto': 'keyword',\n      'external': 'keyword',\n      'function': 'keyword',\n      'initializer': 'keyword',\n      'lazy': 'keyword',\n      'match': 'keyword',\n      'method': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'new': 'keyword',\n      'nonrec': 'keyword',\n      'object': 'keyword',\n      'private': 'keyword',\n      'sig': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'value': 'keyword',\n      'virtual': 'keyword',\n      'when': 'keyword',\n      // builtins\n      'raise': 'builtin',\n      'failwith': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      // Pervasives builtins\n      'asr': 'builtin',\n      'land': 'builtin',\n      'lor': 'builtin',\n      'lsl': 'builtin',\n      'lsr': 'builtin',\n      'lxor': 'builtin',\n      'mod': 'builtin',\n      'or': 'builtin',\n      // More Pervasives\n      'raise_notrace': 'builtin',\n      'trace': 'builtin',\n      'exit': 'builtin',\n      'print_string': 'builtin',\n      'print_endline': 'builtin',\n      'int': 'type',\n      'float': 'type',\n      'bool': 'type',\n      'char': 'type',\n      'string': 'type',\n      'unit': 'type',\n      // Modules\n      'List': 'builtin'\n    }\n  });\n  CodeMirror.defineMIME('text/x-fsharp', {\n    name: 'mllike',\n    extraWords: {\n      'abstract': 'keyword',\n      'assert': 'keyword',\n      'base': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'default': 'keyword',\n      'delegate': 'keyword',\n      'do!': 'keyword',\n      'done': 'keyword',\n      'downcast': 'keyword',\n      'downto': 'keyword',\n      'elif': 'keyword',\n      'extern': 'keyword',\n      'finally': 'keyword',\n      'for': 'keyword',\n      'function': 'keyword',\n      'global': 'keyword',\n      'inherit': 'keyword',\n      'inline': 'keyword',\n      'interface': 'keyword',\n      'internal': 'keyword',\n      'lazy': 'keyword',\n      'let!': 'keyword',\n      'match': 'keyword',\n      'member': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'namespace': 'keyword',\n      'new': 'keyword',\n      'null': 'keyword',\n      'override': 'keyword',\n      'private': 'keyword',\n      'public': 'keyword',\n      'return!': 'keyword',\n      'return': 'keyword',\n      'select': 'keyword',\n      'static': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'upcast': 'keyword',\n      'use!': 'keyword',\n      'use': 'keyword',\n      'void': 'keyword',\n      'when': 'keyword',\n      'yield!': 'keyword',\n      'yield': 'keyword',\n      // Reserved words\n      'atomic': 'keyword',\n      'break': 'keyword',\n      'checked': 'keyword',\n      'component': 'keyword',\n      'const': 'keyword',\n      'constraint': 'keyword',\n      'constructor': 'keyword',\n      'continue': 'keyword',\n      'eager': 'keyword',\n      'event': 'keyword',\n      'external': 'keyword',\n      'fixed': 'keyword',\n      'method': 'keyword',\n      'mixin': 'keyword',\n      'object': 'keyword',\n      'parallel': 'keyword',\n      'process': 'keyword',\n      'protected': 'keyword',\n      'pure': 'keyword',\n      'sealed': 'keyword',\n      'tailcall': 'keyword',\n      'trait': 'keyword',\n      'virtual': 'keyword',\n      'volatile': 'keyword',\n      // builtins\n      'List': 'builtin',\n      'Seq': 'builtin',\n      'Map': 'builtin',\n      'Set': 'builtin',\n      'Option': 'builtin',\n      'int': 'builtin',\n      'string': 'builtin',\n      'not': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      'raise': 'builtin',\n      'failwith': 'builtin'\n    },\n    slashComments: true\n  });\n  CodeMirror.defineMIME('text/x-sml', {\n    name: 'mllike',\n    extraWords: {\n      'abstype': 'keyword',\n      'and': 'keyword',\n      'andalso': 'keyword',\n      'case': 'keyword',\n      'datatype': 'keyword',\n      'fn': 'keyword',\n      'handle': 'keyword',\n      'infix': 'keyword',\n      'infixr': 'keyword',\n      'local': 'keyword',\n      'nonfix': 'keyword',\n      'op': 'keyword',\n      'orelse': 'keyword',\n      'raise': 'keyword',\n      'withtype': 'keyword',\n      'eqtype': 'keyword',\n      'sharing': 'keyword',\n      'sig': 'keyword',\n      'signature': 'keyword',\n      'structure': 'keyword',\n      'where': 'keyword',\n      'true': 'keyword',\n      'false': 'keyword',\n      // types\n      'int': 'builtin',\n      'real': 'builtin',\n      'string': 'builtin',\n      'char': 'builtin',\n      'bool': 'builtin'\n    },\n    slashComments: true\n  });\n});"],"sourceRoot":""}