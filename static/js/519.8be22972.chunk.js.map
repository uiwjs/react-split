{"version":3,"sources":["../node_modules/codemirror/mode/spreadsheet/spreadsheet.js"],"names":["CodeMirror","defineMode","startState","stringType","stack","token","stream","state","length","peek","next","unshift","eol","shift","match","indexOf","eatSpace","defineMIME","mod"],"mappings":"mHAOG,SAAUA,GACX,aAEAA,EAAWC,WAAW,eAAe,WACnC,MAAO,CACLC,WAAY,WACV,MAAO,CACLC,WAAY,KACZC,MAAO,KAGXC,MAAO,SAAeC,EAAQC,GAC5B,GAAKD,EAAL,CAcA,OAZ2B,IAAvBC,EAAMH,MAAMI,SAEO,KAAjBF,EAAOG,QAAkC,KAAjBH,EAAOG,SACjCF,EAAMJ,WAAaG,EAAOG,OAC1BH,EAAOI,OAEPH,EAAMH,MAAMO,QAAQ,YAMhBJ,EAAMH,MAAM,IAClB,IAAK,SACH,KAA0B,WAAnBG,EAAMH,MAAM,KAAoBE,EAAOM,OACxCN,EAAOG,SAAWF,EAAMJ,YAC1BG,EAAOI,OAEPH,EAAMH,MAAMS,SACe,OAAlBP,EAAOG,QAChBH,EAAOI,OACPJ,EAAOI,QAEPJ,EAAOQ,MAAM,gBAIjB,MAAO,SAET,IAAK,iBACH,KAA0B,mBAAnBP,EAAMH,MAAM,KAA4BE,EAAOM,OAC9CN,EAAOQ,MAAM,cAAgBR,EAAOQ,MAAM,SAAUP,EAAMH,MAAMS,QAGxE,MAAO,WAGX,IAAIJ,EAAOH,EAAOG,OAElB,OAAQA,GACN,IAAK,IAGH,OAFAH,EAAOI,OACPH,EAAMH,MAAMO,QAAQ,kBACb,UAET,IAAK,IAEH,OADAL,EAAOI,OACA,WAET,IAAK,KACH,OAAIJ,EAAOQ,MAAM,YAAoB,YACnCR,EAAOI,OACA,QAGX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAEH,OADAJ,EAAOI,OACA,OAET,IAAK,IAEH,OADAJ,EAAOI,OACA,UAGX,OAAIJ,EAAOQ,MAAM,OACXR,EAAOQ,MAAM,QAAgB,QAC1B,SACER,EAAOQ,MAAM,iBAClBR,EAAOQ,MAAM,aAAa,GAAe,UACtC,cACmD,GAAjD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,QAAQN,IAChDH,EAAOI,OACA,YACGJ,EAAOU,YACjBV,EAAOI,OAGF,YAIbV,EAAWiB,WAAW,qBAAsB,eA3G1CC,CAAI,EAAQ","file":"static/js/519.8be22972.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"spreadsheet\", function () {\n    return {\n      startState: function startState() {\n        return {\n          stringType: null,\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (!stream) return; //check for state changes\n\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n\n            state.stack.unshift(\"string\");\n          }\n        } //return state\n        //stack has\n\n\n        switch (state.stack[0]) {\n          case \"string\":\n            while (state.stack[0] === \"string\" && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n\n            return \"string\";\n\n          case \"characterClass\":\n            while (state.stack[0] === \"characterClass\" && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) state.stack.shift();\n            }\n\n            return \"operator\";\n        }\n\n        var peek = stream.peek(); //no stack\n\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(\"characterClass\");\n            return \"bracket\";\n\n          case \":\":\n            stream.next();\n            return \"operator\";\n\n          case \"\\\\\":\n            if (stream.match(/\\\\[a-z]+/)) return \"string-2\";else {\n              stream.next();\n              return \"atom\";\n            }\n\n          case \".\":\n          case \",\":\n          case \";\":\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n          case \"<\":\n          case \"/\":\n          case \"=\":\n            stream.next();\n            return \"atom\";\n\n          case \"$\":\n            stream.next();\n            return \"builtin\";\n        }\n\n        if (stream.match(/\\d+/)) {\n          if (stream.match(/^\\w+/)) return \"error\";\n          return \"number\";\n        } else if (stream.match(/^[a-zA-Z_]\\w*/)) {\n          if (stream.match(/(?=[\\(.])/, false)) return \"keyword\";\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\", \"{\", \"}\"].indexOf(peek) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-spreadsheet\", \"spreadsheet\");\n});"],"sourceRoot":""}