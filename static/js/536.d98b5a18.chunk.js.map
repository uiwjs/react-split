{"version":3,"sources":["../node_modules/codemirror/mode/vhdl/vhdl.js"],"names":["CodeMirror","words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","defineMode","config","parserConfig","curPunc","indentUnit","atoms","hooks","multiLineStrings","keywords","blockKeywords","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","closing","electricChars","defineMIME","mod"],"mappings":"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","file":"static/js/536.d98b5a18.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Originally written by Alf Nielsen, re-written by Michael Zhou\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\",\");\n\n    for (var i = 0; i < words.length; ++i) {\n      var allCaps = words[i].toUpperCase();\n      var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n      obj[words[i]] = true;\n      obj[allCaps] = true;\n      obj[firstCap] = true;\n    }\n\n    return obj;\n  }\n\n  function metaHook(stream) {\n    stream.eatWhile(/[\\w\\$_]/);\n    return \"meta\";\n  }\n\n  CodeMirror.defineMode(\"vhdl\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        atoms = parserConfig.atoms || words(\"null\"),\n        hooks = parserConfig.hooks || {\n      \"`\": metaHook,\n      \"$\": metaHook\n    },\n        multiLineStrings = parserConfig.multiLineStrings;\n    var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" + \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" + \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" + \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" + \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" + \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" + \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n    var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n    var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"') {\n        state.tokenize = tokenString2(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/[\\d']/.test(ch)) {\n        stream.eatWhile(/[\\w\\.']/);\n        return \"number\";\n      }\n\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"--\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenString2(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"--\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string-2\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            ctx = state.context,\n            closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n});"],"sourceRoot":""}