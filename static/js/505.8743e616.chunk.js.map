{"version":3,"sources":["../node_modules/codemirror/mode/python/python.js"],"names":["CodeMirror","wordRegexp","words","RegExp","join","str","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","registerHelper","concat","defineMode","conf","parserConf","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","delimiter","tokenOuter","charAt","substr","singleline","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","next","singleLineStringErrors","isString","formatStringFactory","tokenStringFactory","pop","push","align","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","column","pushBracketScope","slice","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","name","split","mod"],"mappings":"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","file":"static/js/505.8743e616.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatibility with old, cumbersome config system)\n\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n\n    for (var i = 0; i < operators.length; i++) {\n      if (!operators[i]) operators.splice(i--, 1);\n    }\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n    var myKeywords = commonKeywords,\n        myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n    if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins); // tokenizers\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\";\n      if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset) pushPyScope(state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state) {\n      if (stream.eatSpace()) return null; // Handle Comments\n\n      if (stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^[\\d_]+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++) {\n        if (stream.match(operators[i])) return \"operator\";\n      }\n\n      if (stream.match(delimiters)) return \"punctuation\";\n      if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n      if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n      if (stream.match(builtins)) return \"builtin\";\n      if (stream.match(/^(self|cls)\\b/)) return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function (stream, state) {\n          var inner = tokenBaseInner(stream, state);\n\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1);\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n            }\n          }\n\n          return inner;\n        };\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0);\n            if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") {\n        state.scopes.pop();\n      }\n\n      state.scopes.push({\n        offset: top(state).offset + conf.indentUnit,\n        type: \"py\",\n        align: null\n      });\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1;\n      state.scopes.push({\n        offset: state.indent + hangingIndent,\n        type: type,\n        align: align\n      });\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle decorators\n\n      if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n      if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n      if (current == \"pass\" || current == \"return\") state.dedent += 1;\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\") pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n        delimiter_index = \"])}\".indexOf(current);\n\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent;else return ERRORCLASS;\n        }\n      }\n\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{\n            offset: basecolumn || 0,\n            type: \"py\",\n            align: null\n          }],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n      token: function token(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n        if (stream.eol() && state.lambda) state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n        var scope = top(state),\n            closing = scope.type == textAfter.charAt(0);\n        if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent : 0);\n      },\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function words(str) {\n    return str.split(\" \");\n  };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n  });\n});"],"sourceRoot":""}