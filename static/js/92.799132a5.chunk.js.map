{"version":3,"sources":["../node_modules/codemirror/mode/scheme/scheme.js"],"names":["CodeMirror","defineMode","makeKeywords","str","obj","words","split","i","length","keywords","indentKeys","stateStack","indent","type","prev","this","pushStack","state","indentStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","startState","indentation","mode","sExprComment","sExprQuote","token","sol","eatSpace","returnType","escaped","next","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","test","skipToEnd","letter","keyWord","indentTemp","column","propertyIsEnumerable","eol","current","popStack","closeBrackets","pairs","lineComment","defineMIME","mod"],"mappings":"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","file":"static/js/92.799132a5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\",\n        COMMENT = \"comment\",\n        STRING = \"string\",\n        ATOM = \"atom\",\n        NUMBER = \"number\",\n        BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = makeKeywords(\"Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda\");\n\n    function stateStack(indent, type, prev) {\n      // represents a state stack object\n      this.indent = indent;\n      this.type = type;\n      this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n      state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n      state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber(stream) {\n      return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber(stream) {\n      return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber(stream, backup) {\n      if (backup === true) {\n        stream.backUp(1);\n      }\n\n      return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber(stream) {\n      return stream.match(hexMatcher);\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          indentStack: null,\n          indentation: 0,\n          mode: false,\n          sExprComment: false,\n          sExprQuote: false\n        };\n      },\n      token: function token(stream, state) {\n        if (state.indentStack == null && stream.sol()) {\n          // update indentation, but only if indentStack is empty\n          state.indentation = stream.indentation();\n        } // skip spaces\n\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var returnType = null;\n\n        switch (state.mode) {\n          case \"string\":\n            // multi-line string parsing mode\n            var next,\n                escaped = false;\n\n            while ((next = stream.next()) != null) {\n              if (next == \"\\\"\" && !escaped) {\n                state.mode = false;\n                break;\n              }\n\n              escaped = !escaped && next == \"\\\\\";\n            }\n\n            returnType = STRING; // continue on in scheme-string mode\n\n            break;\n\n          case \"comment\":\n            // comment parsing mode\n            var next,\n                maybeEnd = false;\n\n            while ((next = stream.next()) != null) {\n              if (next == \"#\" && maybeEnd) {\n                state.mode = false;\n                break;\n              }\n\n              maybeEnd = next == \"|\";\n            }\n\n            returnType = COMMENT;\n            break;\n\n          case \"s-expr-comment\":\n            // s-expr commenting mode\n            state.mode = false;\n\n            if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n              // actually start scheme s-expr commenting mode\n              state.sExprComment = 0;\n            } else {\n              // if not we just comment the entire of the next token\n              stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n\n              returnType = COMMENT;\n              break;\n            }\n\n          default:\n            // default parsing mode\n            var ch = stream.next();\n\n            if (ch == \"\\\"\") {\n              state.mode = \"string\";\n              returnType = STRING;\n            } else if (ch == \"'\") {\n              if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n                if (typeof state.sExprQuote != \"number\") {\n                  state.sExprQuote = 0;\n                } // else already in a quoted expression\n\n\n                returnType = ATOM;\n              } else {\n                stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                returnType = ATOM;\n              }\n            } else if (ch == '#') {\n              if (stream.eat(\"|\")) {\n                // Multi-line comment\n                state.mode = \"comment\"; // toggle to comment mode\n\n                returnType = COMMENT;\n              } else if (stream.eat(/[tf]/i)) {\n                // #t/#f (atom)\n                returnType = ATOM;\n              } else if (stream.eat(';')) {\n                // S-Expr comment\n                state.mode = \"s-expr-comment\";\n                returnType = COMMENT;\n              } else {\n                var numTest = null,\n                    hasExactness = false,\n                    hasRadix = true;\n\n                if (stream.eat(/[ei]/i)) {\n                  hasExactness = true;\n                } else {\n                  stream.backUp(1); // must be radix specifier\n                }\n\n                if (stream.match(/^#b/i)) {\n                  numTest = isBinaryNumber;\n                } else if (stream.match(/^#o/i)) {\n                  numTest = isOctalNumber;\n                } else if (stream.match(/^#x/i)) {\n                  numTest = isHexNumber;\n                } else if (stream.match(/^#d/i)) {\n                  numTest = isDecimalNumber;\n                } else if (stream.match(/^[-+0-9.]/, false)) {\n                  hasRadix = false;\n                  numTest = isDecimalNumber; // re-consume the intial # if all matches failed\n                } else if (!hasExactness) {\n                  stream.eat('#');\n                }\n\n                if (numTest != null) {\n                  if (hasRadix && !hasExactness) {\n                    // consume optional exactness after radix\n                    stream.match(/^#[ei]/i);\n                  }\n\n                  if (numTest(stream)) returnType = NUMBER;\n                }\n              }\n            } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) {\n              // match non-prefixed number, must be decimal\n              returnType = NUMBER;\n            } else if (ch == \";\") {\n              // comment\n              stream.skipToEnd(); // rest of the line is a comment\n\n              returnType = COMMENT;\n            } else if (ch == \"(\" || ch == \"[\") {\n              var keyWord = '';\n              var indentTemp = stream.column(),\n                  letter;\n              /**\n              Either\n              (indent-word ..\n              (non-indent-word ..\n              (;something else, bracket, etc.\n              */\n\n              while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                keyWord += letter;\n              }\n\n              if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {\n                // indent-word\n                pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n              } else {\n                // non-indent word\n                // we continue eating the spaces\n                stream.eatSpace();\n\n                if (stream.eol() || stream.peek() == \";\") {\n                  // nothing significant after\n                  // we restart indentation 1 space after\n                  pushStack(state, indentTemp + 1, ch);\n                } else {\n                  pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                }\n              }\n\n              stream.backUp(stream.current().length - 1); // undo all the eating\n\n              if (typeof state.sExprComment == \"number\") state.sExprComment++;\n              if (typeof state.sExprQuote == \"number\") state.sExprQuote++;\n              returnType = BRACKET;\n            } else if (ch == \")\" || ch == \"]\") {\n              returnType = BRACKET;\n\n              if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n                popStack(state);\n\n                if (typeof state.sExprComment == \"number\") {\n                  if (--state.sExprComment == 0) {\n                    returnType = COMMENT; // final closing bracket\n\n                    state.sExprComment = false; // turn off s-expr commenting mode\n                  }\n                }\n\n                if (typeof state.sExprQuote == \"number\") {\n                  if (--state.sExprQuote == 0) {\n                    returnType = ATOM; // final closing bracket\n\n                    state.sExprQuote = false; // turn off s-expr quote mode\n                  }\n                }\n              }\n            } else {\n              stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n              if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                returnType = BUILTIN;\n              } else returnType = \"variable\";\n            }\n\n        }\n\n        return typeof state.sExprComment == \"number\" ? COMMENT : typeof state.sExprQuote == \"number\" ? ATOM : returnType;\n      },\n      indent: function indent(state) {\n        if (state.indentStack == null) return state.indentation;\n        return state.indentStack.indent;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-scheme\", \"scheme\");\n});"],"sourceRoot":""}