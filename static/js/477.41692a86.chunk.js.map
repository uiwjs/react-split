{"version":3,"sources":["../node_modules/codemirror/mode/groovy/groovy.js"],"names":["CodeMirror","defineMode","config","words","str","obj","split","i","length","curPunc","keywords","blockKeywords","standaloneKeywords","atoms","tokenBase","stream","state","ch","next","startString","test","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","pop","depth","peek","isBase","maybeEnd","last","newline","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","startState","basecolumn","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","triples","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod"],"mappings":"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","file":"static/js/477.41692a86.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"groovy\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"abstract as assert boolean break byte case catch char class const continue def default \" + \"do double else enum extends final finally float for goto if implements import in \" + \"instanceof int interface long native new package private protected public return \" + \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" + \"try void volatile while\");\n    var blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\n    var standaloneKeywords = words(\"return break continue\");\n    var atoms = words(\"null true false this\");\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        return startString(ch, stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n\n        if (stream.eat(/eE/)) {\n          stream.eat(/\\+\\-/);\n          stream.eatWhile(/\\d/);\n        }\n\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize.push(tokenComment);\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (expectExpression(state.lastToken, false)) {\n          return startString(ch, stream, state);\n        }\n      }\n\n      if (ch == \"-\" && stream.eat(\">\")) {\n        curPunc = \"->\";\n        return null;\n      }\n\n      if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n        stream.eatWhile(/[+\\-*&%=<>|~]/);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      }\n\n      if (state.lastToken == \".\") return \"property\";\n\n      if (stream.eat(\":\")) {\n        curPunc = \"proplabel\";\n        return \"property\";\n      }\n\n      var cur = stream.current();\n\n      if (atoms.propertyIsEnumerable(cur)) {\n        return \"atom\";\n      }\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n        return \"keyword\";\n      }\n\n      return \"variable\";\n    }\n\n    tokenBase.isBase = true;\n\n    function startString(quote, stream, state) {\n      var tripleQuoted = false;\n\n      if (quote != \"/\" && stream.eat(quote)) {\n        if (stream.eat(quote)) tripleQuoted = true;else return \"string\";\n      }\n\n      function t(stream, state) {\n        var escaped = false,\n            next,\n            end = !tripleQuoted;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            if (!tripleQuoted) {\n              break;\n            }\n\n            if (stream.match(quote + quote)) {\n              end = true;\n              break;\n            }\n          }\n\n          if (quote == '\"' && next == \"$\" && !escaped && stream.eat(\"{\")) {\n            state.tokenize.push(tokenBaseUntilBrace());\n            return \"string\";\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize.pop();\n        return \"string\";\n      }\n\n      state.tokenize.push(t);\n      return t(stream, state);\n    }\n\n    function tokenBaseUntilBrace() {\n      var depth = 1;\n\n      function t(stream, state) {\n        if (stream.peek() == \"}\") {\n          depth--;\n\n          if (depth == 0) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          }\n        } else if (stream.peek() == \"{\") {\n          depth++;\n        }\n\n        return tokenBase(stream, state);\n      }\n\n      t.isBase = true;\n      return t;\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize.pop();\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function expectExpression(last, newline) {\n      return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) || last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" || last == \"standalone\" && !newline;\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: [tokenBase],\n          context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true,\n          lastToken: null\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true; // Automatic semicolon insertion\n\n          if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n            popContext(state);\n            ctx = state.context;\n          }\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = state.tokenize[state.tokenize.length - 1](stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state); // Handle indentation for {x -> \\n ... }\n        else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n            popContext(state);\n            state.context.align = false;\n          } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n            while (ctx.type == \"statement\") {\n              ctx = popContext(state);\n            }\n\n            if (ctx.type == \"}\") ctx = popContext(state);\n\n            while (ctx.type == \"statement\") {\n              ctx = popContext(state);\n            }\n          } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        state.lastToken = curPunc || style;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (!state.tokenize[state.tokenize.length - 1].isBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0),\n            ctx = state.context;\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : config.indentUnit);\n      },\n      electricChars: \"{}\",\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      fold: \"brace\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-groovy\", \"groovy\");\n});"],"sourceRoot":""}