{"version":3,"sources":["../node_modules/codemirror/mode/fcl/fcl.js"],"names":["CodeMirror","defineMode","config","indentUnit","keywords","start_blocks","end_blocks","atoms","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","startState","basecolumn","context","startOfLine","token","ctx","sol","indentation","eatSpace","style","col","pushContext","popContext","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod"],"mappings":"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","file":"static/js/471.69c06f6a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fcl\", function (config) {\n    var indentUnit = config.indentUnit;\n    var keywords = {\n      \"term\": true,\n      \"method\": true,\n      \"accu\": true,\n      \"rule\": true,\n      \"then\": true,\n      \"is\": true,\n      \"and\": true,\n      \"or\": true,\n      \"if\": true,\n      \"default\": true\n    };\n    var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n    };\n    var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n    };\n    var atoms = {\n      \"true\": true,\n      \"false\": true,\n      \"nan\": true,\n      \"real\": true,\n      \"min\": true,\n      \"max\": true,\n      \"cog\": true,\n      \"cogs\": true\n    };\n    var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") {\n          stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        } else if (ch == \"0\") {\n          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        } else {\n          stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        }\n\n        return \"number\";\n      }\n\n      if (ch == \"/\" || ch == \"(\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current().toLowerCase();\n\n      if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      if (!state.context.prev) return;\n      var t = state.context.type;\n      if (t == \"end_block\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        var cur = stream.current().toLowerCase();\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");else if (end_blocks.propertyIsEnumerable(cur)) popContext(state);\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var ctx = state.context;\n        var closing = end_blocks.propertyIsEnumerable(textAfter);\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"ryk\",\n      fold: \"brace\",\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});"],"sourceRoot":""}