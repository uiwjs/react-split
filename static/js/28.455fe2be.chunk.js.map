{"version":3,"sources":["../node_modules/prismjs/components/prism-asciidoc.js"],"names":["Prism","attributes","pattern","lookbehind","inside","asciidoc","languages","alias","punctuation","copyFromAsciiDoc","keys","o","i","l","split","length","rest","hooks","add","env","type","content","replace","adoc"],"mappings":"+GAAA,SAAWA,GACT,IAAIC,EAAa,CACfC,QAAS,2FACTC,YAAY,EACZC,OAAQ,CACN,OAAU,CACRF,QAAS,+BACTE,OAAQ,CACN,YAAe,gBAGnB,YAAe,CACbF,QAAS,oBACTE,OAAQ,CACN,YAAe,UAInB,OAAU,oBACV,SAAY,WACZ,YAAe,YACf,SAAY,IAEZ,aAAc,gBAGdC,EAAWL,EAAMM,UAAUD,SAAW,CACxC,gBAAiB,CACfH,QAAS,oDACTK,MAAO,WAET,MAAS,CACPL,QAAS,oDACTE,OAAQ,CACN,WAAc,CACZF,QAAS,uFACTK,MAAO,cAET,YAAe,CACbL,QAAS,kBACTC,YAAY,KAKlB,oBAAqB,CACnBD,QAAS,qDACTE,OAAQ,CACN,YAAe,cAKnB,gBAAiB,CACfF,QAAS,2DACTE,OAAQ,CACN,YAAe,4BAKnB,cAAe,CACbF,QAAS,oEACTE,OAAQ,CACN,YAAe,wCAKnB,mBAAoB,CAClBF,QAAS,iEACTC,YAAY,EACZI,MAAO,eAET,aAAc,CACZL,QAAS,0CACTC,YAAY,EACZI,MAAO,UAET,iBAAkB,CAChBL,QAAS,6DACTC,YAAY,GAEd,QAAW,WACX,MAAS,CACPD,QAAS,kFACTK,MAAO,YACPH,OAAQ,CACN,YAAe,qCAInB,kBAAmB,CACjBF,QAAS,iDACTK,MAAO,OAET,WAAcN,EACd,GAAM,CACJC,QAAS,WACTK,MAAO,eAET,aAAc,CACZL,QAAS,WACTK,MAAO,eAET,WAAc,CACZL,QAAS,4CACTK,MAAO,WAET,QAAW,CAAC,CACVL,QAAS,mBACTC,YAAY,EACZI,MAAO,UACN,CACDL,QAAS,QACTK,MAAO,WAET,MAAS,CACPL,QAAS,uFACTE,OAAQ,CACN,SAAY,kBACZ,YAAe,OACf,WAAc,CACZF,QAAS,yDACTE,OAAQH,EAAWG,UAIzB,OAAU,CAYRF,QAAS,+jBACTC,YAAY,EACZC,OAAQ,CACN,WAAcH,EACd,IAAO,CACLC,QAAS,kCACTE,OAAQ,CACN,YAAe,oCAGnB,gBAAiB,CACfF,QAAS,WACTE,OAAQ,CACN,SAAY,CACVF,QAAS,oBACTC,YAAY,GAEd,SAAY,uBACZ,YAAe,gBAGnB,OAAU,CACRD,QAAS,oBACTE,OAAQ,CACN,YAAe,8BAGnB,KAAQ,CACNF,QAAS,gBACTE,OAAQ,CACNI,YAAa,kBAGjB,YAAe,mFAGnB,YAAe,CACbN,QAAS,iBACTK,MAAO,WAET,OAAU,oBACV,oBAAqB,CACnBL,QAAS,YACTC,YAAY,EACZI,MAAO,gBAIX,SAASE,EAAiBC,GAIxB,IAFA,IAAIC,EAAI,GAECC,EAAI,EAAGC,GAHhBH,EAAOA,EAAKI,MAAM,MAGOC,OAAQH,EAAIC,EAAGD,IACtCD,EAAED,EAAKE,IAAMP,EAASK,EAAKE,IAG7B,OAAOD,EAGTV,EAAWG,OAAoB,YAAEA,OAAOY,KAAOP,EAAiB,mCAChEJ,EAAS,qBAAqBD,OAAOY,KAAOP,EAAiB,SAC7DJ,EAAS,iBAAiBD,OAAOY,KAAOP,EAAiB,WACzDJ,EAAgB,MAAED,OAAOY,KAAOP,EAAiB,oOACjDJ,EAAS,eAAeD,OAAOY,KAAOP,EAAiB,kKACvDJ,EAAgB,MAAED,OAAOY,KAAOP,EAAiB,mCAEjDT,EAAMiB,MAAMC,IAAI,QAAQ,SAAUC,GACf,WAAbA,EAAIC,OACND,EAAIlB,WAAkB,MAAIkB,EAAIE,QAAQC,QAAQ,QAAS,SAG3DtB,EAAMM,UAAUiB,KAAOvB,EAAMM,UAAUD,SAnNzC,CAoNGL","file":"static/js/28.455fe2be.chunk.js","sourcesContent":["(function (Prism) {\n  var attributes = {\n    pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n    lookbehind: true,\n    inside: {\n      'quoted': {\n        pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        inside: {\n          'punctuation': /^[$`]|[$`]$/\n        }\n      },\n      'interpreted': {\n        pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n        inside: {\n          'punctuation': /^'|'$/ // See rest below\n\n        }\n      },\n      'string': /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      'variable': /\\w+(?==)/,\n      'punctuation': /^\\[|\\]$|,/,\n      'operator': /=/,\n      // The negative look-ahead prevents blank matches\n      'attr-value': /(?!^\\s+$).+/\n    }\n  };\n  var asciidoc = Prism.languages.asciidoc = {\n    'comment-block': {\n      pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n      alias: 'comment'\n    },\n    'table': {\n      pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n      inside: {\n        'specifiers': {\n          pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n          alias: 'attr-value'\n        },\n        'punctuation': {\n          pattern: /(^|[^\\\\])[|!]=*/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'passthrough-block': {\n      pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^\\++|\\++$/ // See rest below\n\n      }\n    },\n    // Literal blocks and listing blocks\n    'literal-block': {\n      pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n      }\n    },\n    // Sidebar blocks, quote blocks, example blocks and open blocks\n    'other-block': {\n      pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n      inside: {\n        'punctuation': /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n      }\n    },\n    // list-punctuation and list-label must appear before indented-block\n    'list-punctuation': {\n      pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list-label': {\n      pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    'indented-block': {\n      pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n      lookbehind: true\n    },\n    'comment': /^\\/\\/.*/m,\n    'title': {\n      pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n      alias: 'important',\n      inside: {\n        'punctuation': /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n      }\n    },\n    'attribute-entry': {\n      pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n      alias: 'tag'\n    },\n    'attributes': attributes,\n    'hr': {\n      pattern: /^'{3,}$/m,\n      alias: 'punctuation'\n    },\n    'page-break': {\n      pattern: /^<{3,}$/m,\n      alias: 'punctuation'\n    },\n    'admonition': {\n      pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n      alias: 'keyword'\n    },\n    'callout': [{\n      pattern: /(^[ \\t]*)<?\\d*>/m,\n      lookbehind: true,\n      alias: 'symbol'\n    }, {\n      pattern: /<\\d+>/,\n      alias: 'symbol'\n    }],\n    'macro': {\n      pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n      inside: {\n        'function': /^[a-z\\d-]+(?=:)/,\n        'punctuation': /^::?/,\n        'attributes': {\n          pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n          inside: attributes.inside\n        }\n      }\n    },\n    'inline': {\n      /*\n      The initial look-behind prevents the highlighting of escaped quoted text.\n      \tQuoted text can be multi-line but cannot span an empty line.\n      All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n      \tFirst, we handle the constrained quotes.\n      Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n      They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n      \tThen we handle the unconstrained quotes.\n      Those do not have the restrictions of the constrained quotes.\n      They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n       */\n      pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n      lookbehind: true,\n      inside: {\n        'attributes': attributes,\n        'url': {\n          pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n          inside: {\n            'punctuation': /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n          }\n        },\n        'attribute-ref': {\n          pattern: /^\\{.+\\}$/,\n          inside: {\n            'variable': {\n              pattern: /(^\\{)[a-z\\d,+_-]+/,\n              lookbehind: true\n            },\n            'operator': /^[=?!#%@$]|!(?=[:}])/,\n            'punctuation': /^\\{|\\}$|::?/\n          }\n        },\n        'italic': {\n          pattern: /^(['_])[\\s\\S]+\\1$/,\n          inside: {\n            'punctuation': /^(?:''?|__?)|(?:''?|__?)$/\n          }\n        },\n        'bold': {\n          pattern: /^\\*[\\s\\S]+\\*$/,\n          inside: {\n            punctuation: /^\\*\\*?|\\*\\*?$/\n          }\n        },\n        'punctuation': /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n      }\n    },\n    'replacement': {\n      pattern: /\\((?:C|TM|R)\\)/,\n      alias: 'builtin'\n    },\n    'entity': /&#?[\\da-z]{1,8};/i,\n    'line-continuation': {\n      pattern: /(^| )\\+$/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n  function copyFromAsciiDoc(keys) {\n    keys = keys.split(' ');\n    var o = {};\n\n    for (var i = 0, l = keys.length; i < l; i++) {\n      o[keys[i]] = asciidoc[keys[i]];\n    }\n\n    return o;\n  }\n\n  attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n  asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n  asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n  asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n  asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n  asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.replace(/&amp;/, '&');\n    }\n  });\n  Prism.languages.adoc = Prism.languages.asciidoc;\n})(Prism);"],"sourceRoot":""}