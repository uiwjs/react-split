{"version":3,"sources":["../node_modules/codemirror/mode/tcl/tcl.js"],"names":["CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","quote","ch","next","inParams","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","escaped","end","maybeEnd","startState","token","eatSpace","defineMIME","mod"],"mappings":"mHAQG,SAAUA,GACX,aAEAA,EAAWC,WAAW,OAAO,WAC3B,SAASC,EAAWC,GAIlB,IAHA,IAAIC,EAAM,GACNC,EAAQF,EAAIG,MAAM,KAEbC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAClCH,EAAIC,EAAME,KAAM,EAGlB,OAAOH,EAGT,IAAIK,EAAWP,EAAW,+zBACtBQ,EAAYR,EAAW,kEACvBS,EAAiB,qBAErB,SAASC,EAAMC,EAAQC,EAAOC,GAE5B,OADAD,EAAME,SAAWD,EACVA,EAAEF,EAAQC,GAGnB,SAASG,EAAUJ,EAAQC,GACzB,IAAII,EAAeJ,EAAMI,aACzBJ,EAAMI,cAAe,EACrB,IAwCmBC,EAxCfC,EAAKP,EAAOQ,OAEhB,GAAW,KAAND,GAAmB,KAANA,IAAcN,EAAMQ,SAE/B,IAAI,mBAAmBC,KAAKH,GAEjC,MADU,KAANA,GAAaF,EAAcJ,EAAMQ,UAAW,EAAoB,KAANF,IAAWN,EAAMQ,UAAW,GACnF,KACF,GAAI,KAAKC,KAAKH,GAEnB,OADAP,EAAOW,SAAS,UACT,SACF,GAAU,KAANJ,EACT,OAAIP,EAAOY,IAAI,KAAab,EAAMC,EAAQC,EAAOY,GACvC,KAANN,GAAaP,EAAOc,MAAM,YAAoBf,EAAMC,EAAQC,EAAOc,IACvEf,EAAOgB,YACA,WACF,GAAU,KAANT,EAET,OADAP,EAAOiB,OAAO,KACP,UACF,GAAU,KAANV,EAIT,OAHAP,EAAOW,SAAS,qBAChBX,EAAOW,SAAS,KAChBV,EAAMI,cAAe,EACd,UACF,GAAIP,EAAeY,KAAKH,GAE7B,OADAP,EAAOW,SAASb,GACT,UAEPE,EAAOW,SAAS,wBAChB,IAAIO,EAAOlB,EAAOmB,UAAUC,cAC5B,OAAIxB,GAAYA,EAASyB,qBAAqBH,GAAc,UAExDrB,GAAaA,EAAUwB,qBAAqBH,IAC9CjB,EAAMI,cAAe,EACd,WAGF,KAjCP,OAAON,EAAMC,EAAQC,GAqCJK,EArCuBC,EAsCnC,SAAUP,EAAQC,GAKvB,IAJA,IACIO,EADAc,GAAU,EAEVC,GAAM,EAEuB,OAAzBf,EAAOR,EAAOQ,SAAiB,CACrC,GAAIA,GAAQF,IAAUgB,EAAS,CAC7BC,GAAM,EACN,MAGFD,GAAWA,GAAmB,MAARd,EAIxB,OADIe,IAAKtB,EAAME,SAAWC,GACnB,YAIX,SAASS,EAAab,EAAQC,GAI5B,IAHA,IACIM,EADAiB,GAAW,EAGRjB,EAAKP,EAAOQ,QAAQ,CACzB,GAAU,KAAND,GAAaiB,EAAU,CACzBvB,EAAME,SAAWC,EACjB,MAGFoB,EAAiB,KAANjB,EAGb,MAAO,UAGT,SAASQ,EAAcf,EAAQC,GAI7B,IAHA,IACIM,EADAiB,EAAW,EAGRjB,EAAKP,EAAOQ,QAAQ,CACzB,GAAU,KAAND,GAAyB,GAAZiB,EAAe,CAC9BvB,EAAME,SAAWC,EACjB,MAGQ,KAANG,EAAWiB,IAA0B,KAANjB,IAAWiB,EAAW,GAG3D,MAAO,OAGT,MAAO,CACLC,WAAY,WACV,MAAO,CACLtB,SAAUC,EACVC,cAAc,EACdI,UAAU,IAGdiB,MAAO,SAAe1B,EAAQC,GAC5B,OAAID,EAAO2B,WAAmB,KACvB1B,EAAME,SAASH,EAAQC,QAIpCd,EAAWyC,WAAW,aAAc,OAxIlCC,CAAI,EAAQ","file":"static/js/523.057bd8c9.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tcl\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" + \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" + \"binary break catch cd close concat continue dde eof encoding error \" + \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" + \"filename flush for foreach format gets glob global history http if \" + \"incr info interp join lappend lindex linsert list llength load lrange \" + \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" + \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" + \"registry regsub rename resource return scan seek set socket source split \" + \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" + \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" + \"tclvars tell time trace unknown unset update uplevel upvar variable \" + \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\")) return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n});"],"sourceRoot":""}