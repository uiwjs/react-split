{"version":3,"sources":["../node_modules/prismjs/components/prism-rust.js"],"names":["Prism","languages","rust","pattern","lookbehind","greedy","alias","inside"],"mappings":"+GAMAA,MAAMC,UAAUC,KAAO,CACrB,QAAW,CAAC,CACVC,QAAS,4BACTC,YAAY,GACX,CACDD,QAAS,mBACTC,YAAY,IAEd,OAAU,CAAC,CACTD,QAAS,uCACTE,QAAQ,GACP,CACDF,QAAS,0BACTE,QAAQ,IAEV,KAAQ,CACNF,QAAS,wEACTG,MAAO,UAET,sBAAuB,CACrBH,QAAS,YACTG,MAAO,UAET,QAAW,6TACX,UAAa,CACXH,QAAS,aACTE,QAAQ,EACRC,MAAO,aAET,SAAY,CAAC,eACb,oBACA,cAAe,CACbH,QAAS,OACTG,MAAO,YAGT,OAAU,oKAEV,iBAAkB,CAChBH,QAAS,uBACTI,OAAQ,CACN,YAAe,QACf,SAAY,SAGhB,YAAe,mCACf,SAAY","file":"static/js/337.a060dd76.chunk.js","sourcesContent":["/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\nPrism.languages.rust = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: true\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }],\n  'char': {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: 'string'\n  },\n  'lifetime-annotation': {\n    pattern: /'[^\\s>']+/,\n    alias: 'symbol'\n  },\n  'keyword': /\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  'attribute': {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: true,\n    alias: 'attr-name'\n  },\n  'function': [/\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n  /\\w+!(?=\\s*\\(|\\[)/],\n  'macro-rules': {\n    pattern: /\\w+!/,\n    alias: 'function'\n  },\n  // Hex, oct, bin, dec numbers with visual separators and type suffix\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  // Closure params should not be confused with bitwise OR |\n  'closure-params': {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      'punctuation': /[|:,]/,\n      'operator': /[&*]/\n    }\n  },\n  'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n  'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n};"],"sourceRoot":""}