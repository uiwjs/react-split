{"version":3,"sources":["../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/markdown/markdown.js"],"names":["CodeMirror","htmlConfig","autoSelfClosers","implicitlyClosed","contextGrabbers","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","mod","cmCfg","modeCfg","getMode","htmlModeMissing","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","xml","tokenTypeOverrides","tokenTypes","header","code","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","switchInline","f","inline","switchBlock","block","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","mode","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","line","firstTokenOnLine","prevLineLineIsEmpty","string","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","skipToEnd","getType","setext","listType","taskList","fencedEndRE","RegExp","localMode","findModeByName","found","mime","mimes","localState","local","lookAhead","charAt","peek","footnoteLink","md_inside","indexOf","returnType","currListInd","hasExitedList","maxFencedEndInd","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","matchCh","regex","replace","previousFormatting","count","t","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","endChar","returnState","linkRE","footnoteLinkInside","footnoteUrl","copyState","s","slice","closeBrackets","fold"],"mappings":"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","file":"static/js/4.eb76230d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          if (cx.tagName) context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    } // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n\n\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false; // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0; // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false; // Turn on strikethrough syntax\n\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.xml === undefined) modeCfg.xml = true; // Allow token types to be overridden by user-provided token types.\n\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n        listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n        taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n    ,\n        atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n        setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/,\n        textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n        fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/,\n        linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n    ,\n        punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n        expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    } // Blocks\n\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false; // Reset EM state\n\n      state.em = false; // Reset STRONG state\n\n      state.strong = false; // Reset strikethrough state\n\n      state.strikethrough = false; // Reset state.quote\n\n      state.quote = 0; // Reset state.indentedCode\n\n      state.indentedCode = false;\n\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      } // Reset state.trailingSpace\n\n\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false; // Mark this line as blank\n\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation; // compute once per line (on first token)\n\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n\n        if (prevLineIsList) {\n          state.list = null; // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1]; // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      } // not comprehensive (currently only for setext detection purposes)\n\n\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0; // Add this list item's content's indentation to the stack\n\n        state.listStack.push(state.indentation); // Reset inline styles which shouldn't propagate aross list items\n\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\"); // try switching mode\n\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state); // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if ( // if setext set, indicates line after ---/===\n      state.setext || // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext; // has no effect on type so we can reset it now\n\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n\n      return switchInline(stream, state, state.inline);\n    }\n\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n\n      return style;\n    }\n\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    } // Inline\n\n\n    function getType(state) {\n      var styles = [];\n\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          } // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n\n\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n\n      if (state.quote) {\n        styles.push(tokenTypes.quote); // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n\n      return undefined;\n    }\n\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n\n      state.taskOpen = false;\n      state.taskClosed = false;\n\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n\n      var ch = stream.next(); // Matches link titles present on next line\n\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n\n        if (ch === '(') {\n          matchCh = ')';\n        }\n\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      } // If this block is changed, it may need to be updated in GFM mode\n\n\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n\n      if (ch === '\\\\') {\n        stream.next();\n\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkEmail;\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n            before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n\n        while (len < 3 && stream.eat(ch)) {\n          len++;\n        }\n\n        var after = stream.peek() || \" \"; // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n            setStrong = null;\n\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match(/^~~/, true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n\n      return getType(state);\n    }\n\n    function linkInline(stream, state) {\n      var ch = stream.next();\n\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.next();\n\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n\n      return 'error';\n    }\n\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n\n      return switchInline(stream, state, inlineNormal);\n    }\n\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(/^\\]:/, true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      } // Match URL\n\n\n      stream.match(/^[^\\s]+/, true); // Check for link title\n\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n      }\n\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function token(stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream\n          }; // Reset state.taskList\n\n          state.taskList = false; // Reset state.trailingSpace\n\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n\n          if (!state.localState) {\n            state.f = state.block;\n\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n\n        return state.f(stream, state);\n      },\n      innerMode: function innerMode(state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function indent(state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});"],"sourceRoot":""}