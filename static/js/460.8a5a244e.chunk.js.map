{"version":3,"sources":["../node_modules/codemirror/mode/d/d.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","statementIndentUnit","keywords","builtin","blockKeywords","atoms","hooks","multiLineStrings","isOperatorChar","tokenBase","stream","state","quote","ch","next","result","tokenize","escaped","end","test","eatWhile","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","defineMIME","name","_state","mod"],"mappings":"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","file":"static/js/460.8a5a244e.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"d\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        blockKeywords = parserConfig.blockKeywords || {},\n        atoms = parserConfig.atoms || {},\n        hooks = parserConfig.hooks || {},\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"+\")) {\n          state.tokenize = tokenNestedComment;\n          return tokenNestedComment(stream, state);\n        }\n\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n\n      if (builtin.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"builtin\";\n      }\n\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenNestedComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"+\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" + \"out scope struct switch try union unittest version while with\";\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" + \"debug default delegate delete deprecated export extern final finally function goto immutable \" + \"import inout invariant is lazy macro module new nothrow override package pragma private \" + \"protected public pure ref return shared short static super synchronized template this \" + \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" + \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function _(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n});"],"sourceRoot":""}