{"version":3,"sources":["../node_modules/codemirror/mode/cmake/cmake.js"],"names":["CodeMirror","defineMode","variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","startState","token","eatSpace","ch","match","skipToEnd","eatWhile","tokenize","defineMIME","mod"],"mappings":"mHAIG,SAAUA,GACX,aAEAA,EAAWC,WAAW,SAAS,WAC7B,IAAIC,EAAiB,wBAErB,SAASC,EAAYC,EAAQC,GAK3B,IAJA,IAAIC,EACAC,EACAC,GAAY,GAERJ,EAAOK,QAAUH,EAAUF,EAAOM,SAAWL,EAAMM,SAAS,CAClE,GAAgB,MAAZL,GAA2B,MAARC,GAAiC,KAAjBF,EAAMM,QAAgB,CAC3DH,GAAY,EACZ,MAGFD,EAAOD,EAaT,OAVIE,GACFJ,EAAOQ,OAAO,GAGZN,GAAWD,EAAMM,QACnBN,EAAMQ,gBAAiB,EAEvBR,EAAMQ,gBAAiB,EAGlB,SAqDT,MAAO,CACLC,WAAY,WACV,IAAIT,EAAQ,CACZ,cAAqB,EACrB,WAAkB,EAClB,gBAAuB,EACvB,SAAgB,GAChB,OAAOA,GAETU,MAAO,SAAeX,EAAQC,GAC5B,OAAID,EAAOY,WAAmB,KA5DlC,SAAkBZ,EAAQC,GACxB,IAAIY,EAAKb,EAAOM,OAEhB,MAAW,MAAPO,EACEb,EAAOc,MAAMhB,GACR,aAGF,WAILG,EAAMQ,gBAERT,EAAOQ,OAAO,GACPT,EAAYC,EAAQC,IAKzBD,EAAOc,MAAM,gBAAkBd,EAAOc,MAAM,kBAC9Cd,EAAOQ,OAAO,GACP,OAGC,KAANK,GACFb,EAAOe,YACA,WAIC,KAANF,GAAmB,KAANA,GAEfZ,EAAMM,QAAUM,EAETd,EAAYC,EAAQC,IAGnB,KAANY,GAAmB,KAANA,EACR,UAGLA,EAAGC,MAAM,SACJ,UAGTd,EAAOgB,SAAS,SACT,MAcEC,CAASjB,EAAQC,QAI9BL,EAAWsB,WAAW,eAAgB,SAnGuBC,CAAI,EAAQ","file":"static/js/455.34df74f3.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"cmake\", function () {\n    var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\n    function tokenString(stream, state) {\n      var current,\n          prev,\n          found_var = false;\n\n      while (!stream.eol() && (current = stream.next()) != state.pending) {\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n          found_var = true;\n          break;\n        }\n\n        prev = current;\n      }\n\n      if (found_var) {\n        stream.backUp(1);\n      }\n\n      if (current == state.pending) {\n        state.continueString = false;\n      } else {\n        state.continueString = true;\n      }\n\n      return \"string\";\n    }\n\n    function tokenize(stream, state) {\n      var ch = stream.next(); // Have we found a variable?\n\n      if (ch === '$') {\n        if (stream.match(variable_regex)) {\n          return 'variable-2';\n        }\n\n        return 'variable';\n      } // Should we still be looking for the end of a string?\n\n\n      if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return tokenString(stream, state);\n      } // Do we just have a function on our hands?\n      // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n\n\n      if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n        stream.backUp(1);\n        return 'def';\n      }\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Have we found a string?\n\n\n      if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch; // Perform the looping function to find the end\n\n        return tokenString(stream, state);\n      }\n\n      if (ch == '(' || ch == ')') {\n        return 'bracket';\n      }\n\n      if (ch.match(/[0-9]/)) {\n        return 'number';\n      }\n\n      stream.eatWhile(/[\\w-]/);\n      return null;\n    }\n\n    return {\n      startState: function startState() {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n});"],"sourceRoot":""}