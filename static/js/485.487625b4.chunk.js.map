{"version":3,"sources":["../node_modules/codemirror/mode/lua/lua.js"],"names":["CodeMirror","defineMode","config","parserConfig","indentUnit","wordRE","words","RegExp","join","specials","builtins","keywords","indentTokens","dedentTokens","dedentPartial","readBracket","stream","level","eat","normal","state","quote","ch","next","cur","bracketed","skipToEnd","escaped","test","peek","eatWhile","style","curlev","startState","basecol","indentDepth","token","eatSpace","word","current","indent","textAfter","closing","lineComment","blockCommentStart","blockCommentEnd","defineMIME","mod"],"mappings":"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","file":"static/js/485.487625b4.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// LUA mode. Ported to CodeMirror 2 from Franciszek Wawrzak's\n// CodeMirror 1 mode.\n// highlights keywords, strings, comments (no leveling supported! (\"[==[\")), tokens, basic indenting\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"lua\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n\n    function prefixRE(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")\", \"i\");\n    }\n\n    function wordRE(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n\n    var specials = wordRE(parserConfig.specials || []); // long list of standard functions from lua manual\n\n    var builtins = wordRE([\"_G\", \"_VERSION\", \"assert\", \"collectgarbage\", \"dofile\", \"error\", \"getfenv\", \"getmetatable\", \"ipairs\", \"load\", \"loadfile\", \"loadstring\", \"module\", \"next\", \"pairs\", \"pcall\", \"print\", \"rawequal\", \"rawget\", \"rawset\", \"require\", \"select\", \"setfenv\", \"setmetatable\", \"tonumber\", \"tostring\", \"type\", \"unpack\", \"xpcall\", \"coroutine.create\", \"coroutine.resume\", \"coroutine.running\", \"coroutine.status\", \"coroutine.wrap\", \"coroutine.yield\", \"debug.debug\", \"debug.getfenv\", \"debug.gethook\", \"debug.getinfo\", \"debug.getlocal\", \"debug.getmetatable\", \"debug.getregistry\", \"debug.getupvalue\", \"debug.setfenv\", \"debug.sethook\", \"debug.setlocal\", \"debug.setmetatable\", \"debug.setupvalue\", \"debug.traceback\", \"close\", \"flush\", \"lines\", \"read\", \"seek\", \"setvbuf\", \"write\", \"io.close\", \"io.flush\", \"io.input\", \"io.lines\", \"io.open\", \"io.output\", \"io.popen\", \"io.read\", \"io.stderr\", \"io.stdin\", \"io.stdout\", \"io.tmpfile\", \"io.type\", \"io.write\", \"math.abs\", \"math.acos\", \"math.asin\", \"math.atan\", \"math.atan2\", \"math.ceil\", \"math.cos\", \"math.cosh\", \"math.deg\", \"math.exp\", \"math.floor\", \"math.fmod\", \"math.frexp\", \"math.huge\", \"math.ldexp\", \"math.log\", \"math.log10\", \"math.max\", \"math.min\", \"math.modf\", \"math.pi\", \"math.pow\", \"math.rad\", \"math.random\", \"math.randomseed\", \"math.sin\", \"math.sinh\", \"math.sqrt\", \"math.tan\", \"math.tanh\", \"os.clock\", \"os.date\", \"os.difftime\", \"os.execute\", \"os.exit\", \"os.getenv\", \"os.remove\", \"os.rename\", \"os.setlocale\", \"os.time\", \"os.tmpname\", \"package.cpath\", \"package.loaded\", \"package.loaders\", \"package.loadlib\", \"package.path\", \"package.preload\", \"package.seeall\", \"string.byte\", \"string.char\", \"string.dump\", \"string.find\", \"string.format\", \"string.gmatch\", \"string.gsub\", \"string.len\", \"string.lower\", \"string.match\", \"string.rep\", \"string.reverse\", \"string.sub\", \"string.upper\", \"table.concat\", \"table.insert\", \"table.maxn\", \"table.remove\", \"table.sort\"]);\n    var keywords = wordRE([\"and\", \"break\", \"elseif\", \"false\", \"nil\", \"not\", \"or\", \"return\", \"true\", \"function\", \"end\", \"if\", \"then\", \"else\", \"do\", \"while\", \"repeat\", \"until\", \"for\", \"in\", \"local\"]);\n    var indentTokens = wordRE([\"function\", \"if\", \"repeat\", \"do\", \"\\\\(\", \"{\"]);\n    var dedentTokens = wordRE([\"end\", \"until\", \"\\\\)\", \"}\"]);\n    var dedentPartial = prefixRE([\"end\", \"until\", \"\\\\)\", \"}\", \"else\", \"elseif\"]);\n\n    function readBracket(stream) {\n      var level = 0;\n\n      while (stream.eat(\"=\")) {\n        ++level;\n      }\n\n      stream.eat(\"[\");\n      return level;\n    }\n\n    function normal(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"-\" && stream.eat(\"-\")) {\n        if (stream.eat(\"[\") && stream.eat(\"[\")) return (state.cur = bracketed(readBracket(stream), \"comment\"))(stream, state);\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == \"\\\"\" || ch == \"'\") return (state.cur = string(ch))(stream, state);\n      if (ch == \"[\" && /[\\[=]/.test(stream.peek())) return (state.cur = bracketed(readBracket(stream), \"string\"))(stream, state);\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w.%]/);\n        return \"number\";\n      }\n\n      if (/[\\w_]/.test(ch)) {\n        stream.eatWhile(/[\\w\\\\\\-_.]/);\n        return \"variable\";\n      }\n\n      return null;\n    }\n\n    function bracketed(level, style) {\n      return function (stream, state) {\n        var curlev = null,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (curlev == null) {\n            if (ch == \"]\") curlev = 0;\n          } else if (ch == \"=\") ++curlev;else if (ch == \"]\" && curlev == level) {\n            state.cur = normal;\n            break;\n          } else curlev = null;\n        }\n\n        return style;\n      };\n    }\n\n    function string(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.cur = normal;\n        return \"string\";\n      };\n    }\n\n    return {\n      startState: function startState(basecol) {\n        return {\n          basecol: basecol || 0,\n          indentDepth: 0,\n          cur: normal\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.cur(stream, state);\n        var word = stream.current();\n\n        if (style == \"variable\") {\n          if (keywords.test(word)) style = \"keyword\";else if (builtins.test(word)) style = \"builtin\";else if (specials.test(word)) style = \"variable-2\";\n        }\n\n        if (style != \"comment\" && style != \"string\") {\n          if (indentTokens.test(word)) ++state.indentDepth;else if (dedentTokens.test(word)) --state.indentDepth;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var closing = dedentPartial.test(textAfter);\n        return state.basecol + indentUnit * (state.indentDepth - (closing ? 1 : 0));\n      },\n      lineComment: \"--\",\n      blockCommentStart: \"--[[\",\n      blockCommentEnd: \"]]\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-lua\", \"lua\");\n});"],"sourceRoot":""}