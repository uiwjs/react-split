{"version":3,"sources":["../node_modules/prismjs/components/prism-ftl.js"],"names":["Prism","FTL_EXPR","source","i","replace","ftl","pattern","greedy","RegExp","inside","lookbehind","alias","rest","string","interpolation","languages","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"gHAAA,SAAWA,GAKT,IAFA,IAAIC,EAAW,sFAAsFC,OAE5FC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAWA,EAASG,QAAQ,WAAW,WACrC,OAAOH,KAIXA,EAAWA,EAASG,QAAQ,UAAW,SACvC,IAAIC,EAAM,CACR,QAAW,kBACX,OAAU,CAAC,CAETC,QAAS,iCACTC,QAAQ,GACP,CACDD,QAASE,OAAO,sDAAsDN,OAAOE,QAAQ,WAAW,WAC9F,OAAOH,MAETM,QAAQ,EACRE,OAAQ,CACN,cAAiB,CACfH,QAASE,OAAO,2CAA2CN,OAAOE,QAAQ,WAAW,WACnF,OAAOH,MAETS,YAAY,EACZD,OAAQ,CACN,4BAA6B,CAC3BH,QAAS,YACTK,MAAO,eAETC,KAAM,UAKd,QAAW,aACX,QAAW,qBACX,mBAAoB,CAClBN,QAAS,uBACTI,YAAY,EACZC,MAAO,YAET,SAAY,eACZ,OAAU,gBACV,SAAY,4EACZ,YAAe,iBAEjBN,EAAIQ,OAAO,GAAGJ,OAAOK,cAAcL,OAAOG,KAAOP,EACjDL,EAAMe,UAAUV,IAAM,CACpB,cAAe,CAEbC,QAAS,eACTK,MAAO,WAET,gBAAiB,CACfL,QAAS,cACTG,OAAQ,CACN,UAAa,CACXH,QAAS,uBACTI,YAAY,EACZC,MAAO,WAET,YAAe,cACf,QAAW,CACTL,QAAS,mBACTK,MAAO,MACPF,OAAQJ,KAId,oBAAqB,CACnBC,QAAS,kBACTG,OAAQ,CACN,YAAe,YACf,QAAW,CACTH,QAAS,mBACTK,MAAO,MACPF,OAAQJ,MAKhBL,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IAAIZ,EAAUE,OAAO,mEAAmEN,OAAOE,QAAQ,WAAW,WAChH,OAAOH,KACL,MACJD,EAAMe,UAAU,qBAAqBI,kBAAkBD,EAAK,MAAOZ,MAErEN,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAMe,UAAU,qBAAqBK,qBAAqBF,EAAK,UA7FnE,CA+FGlB","file":"static/js/126.f0087686.chunk.js","sourcesContent":["(function (Prism) {\n  // https://freemarker.apache.org/docs/dgui_template_exp.html\n  // FTL expression with 4 levels of nesting supported\n  var FTL_EXPR = /(?!<#--)[^()\"']|\\((?:<expr>)*\\)|<#--[\\s\\S]*?-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n\n  for (var i = 0; i < 2; i++) {\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n      return FTL_EXPR;\n    });\n  }\n\n  FTL_EXPR = FTL_EXPR.replace(/<expr>/g, '[^\\s\\S]');\n  var ftl = {\n    'comment': /<#--[\\s\\S]*?-->/,\n    'string': [{\n      // raw string\n      pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n      greedy: true\n    }, {\n      pattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:<expr>)*?\\})*\\1/.source.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      })),\n      greedy: true,\n      inside: {\n        'interpolation': {\n          pattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () {\n            return FTL_EXPR;\n          })),\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        }\n      }\n    }],\n    'keyword': /\\b(?:as)\\b/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'builtin-function': {\n      pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'function': /\\w+(?=\\s*\\()/,\n    'number': /\\d+(?:\\.\\d+)?/,\n    'operator': /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n    'punctuation': /[,;.:()[\\]{}]/\n  };\n  ftl.string[1].inside.interpolation.inside.rest = ftl;\n  Prism.languages.ftl = {\n    'ftl-comment': {\n      // the pattern is shortened to be more efficient\n      pattern: /^<#--[\\s\\S]*/,\n      alias: 'comment'\n    },\n    'ftl-directive': {\n      pattern: /^<[\\s\\S]+>$/,\n      inside: {\n        'directive': {\n          pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'punctuation': /^<\\/?|\\/?>$/,\n        'content': {\n          pattern: /[\\s\\S]*\\S[\\s\\S]*/,\n          alias: 'ftl',\n          inside: ftl\n        }\n      }\n    },\n    'ftl-interpolation': {\n      pattern: /^\\$\\{[\\s\\S]*\\}$/,\n      inside: {\n        'punctuation': /^\\$\\{|\\}$/,\n        'content': {\n          pattern: /[\\s\\S]*\\S[\\s\\S]*/,\n          alias: 'ftl',\n          inside: ftl\n        }\n      }\n    }\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () {\n      return FTL_EXPR;\n    }), 'gi');\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n  });\n})(Prism);"],"sourceRoot":""}