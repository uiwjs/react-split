{"version":3,"sources":["../node_modules/codemirror/mode/mathematica/mathematica.js"],"names":["CodeMirror","defineMode","_config","_parserConfig","pFloat","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","startState","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","name","mod"],"mappings":"mHAUG,SAAUA,GACX,aAEAA,EAAWC,WAAW,eAAe,SAAUC,EAASC,GAEtD,IAEIC,EAAS,+BAETC,EAAa,YAAcD,EAAS,MAEpCE,EAAa,IAAIC,OAAO,mDAA2CF,EAAa,2BAChFG,EAAc,IAAID,OAAO,MAAQH,EAASC,EAAa,0BACvDI,EAAgB,IAAIF,OAAO,kFAE/B,SAASG,EAAUC,EAAQC,GACzB,IAAIC,EAIJ,MAAW,OAFXA,EAAKF,EAAOG,SAGVF,EAAMG,SAAWC,EACVJ,EAAMG,SAASJ,EAAQC,IAIrB,MAAPC,GACEF,EAAOM,IAAI,MACbL,EAAMM,eACNN,EAAMG,SAAWI,EACVP,EAAMG,SAASJ,EAAQC,KAKlCD,EAAOS,OAAO,GAGVT,EAAOU,MAAMf,GAAY,GAAM,IAM/BK,EAAOU,MAAMb,GAAa,GAAM,GAL3B,SAWLG,EAAOU,MAAM,wBAAwB,GAAM,GACtC,OAILV,EAAOU,MAAM,yDAAyD,GAAM,GACvE,OAILV,EAAOU,MAAM,8EAA8E,GAAM,GAC5F,WAKLV,EAAOU,MAAM,mGAAmG,GAAM,IAOtHV,EAAOU,MAAM,sDAAsD,GAAM,IAIzEV,EAAOU,MAAM,8BAA8B,GAAM,IAIjDV,EAAOU,MAAM,8BAA8B,GAAM,GAd5C,aAmBLV,EAAOU,MAAM,kCAAkC,GAAM,GAChD,aAILV,EAAOU,MAAM,uBAAuB,GAAM,GACrC,UAKLV,EAAOU,MAAM,0CAA0C,GAAM,GACxD,aAILV,EAAOU,MAAMZ,GAAe,GAAM,GAC7B,UAILE,EAAOU,MAAM,8DAA8D,GAAM,GAC5E,YAITV,EAAOG,OAEA,UAGT,SAASE,EAAYL,EAAQC,GAK3B,IAJA,IAAIE,EACAQ,GAAM,EACNC,GAAU,EAEmB,OAAzBT,EAAOH,EAAOG,SAAiB,CACrC,GAAa,MAATA,IAAiBS,EAAS,CAC5BD,GAAM,EACN,MAGFC,GAAWA,GAAoB,OAATT,EAOxB,OAJIQ,IAAQC,IACVX,EAAMG,SAAWL,GAGZ,SAKT,SAASS,EAAaR,EAAQC,GAG5B,IAFA,IAAIY,EAAMV,EAEHF,EAAMM,aAAe,GAA+B,OAAzBJ,EAAOH,EAAOG,SACjC,MAATU,GAAyB,MAATV,GAAcF,EAAMM,eAC3B,MAATM,GAAyB,MAATV,GAAcF,EAAMM,eACxCM,EAAOV,EAOT,OAJIF,EAAMM,cAAgB,IACxBN,EAAMG,SAAWL,GAGZ,UAGT,MAAO,CACLe,WAAY,WACV,MAAO,CACLV,SAAUL,EACVQ,aAAc,IAGlBQ,MAAO,SAAef,EAAQC,GAC5B,OAAID,EAAOgB,WAAmB,KACvBf,EAAMG,SAASJ,EAAQC,IAEhCgB,kBAAmB,KACnBC,gBAAiB,SAGrB7B,EAAW8B,WAAW,qBAAsB,CAC1CC,KAAM,gBA/KNC,CAAI,EAAQ","file":"static/js/486.1b113abd.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mathematica', function (_config, _parserConfig) {\n    // used pattern building blocks\n    var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n    var pBase = \"(?:\\\\d+)\";\n    var pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n    var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n    var pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\"; // regular expressions\n\n    var reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n    var reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n    var reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n    function tokenBase(stream, state) {\n      var ch; // get next character\n\n      ch = stream.next(); // string\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      } // comment\n\n\n      if (ch === '(') {\n        if (stream.eat('*')) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      } // go back one character\n\n\n      stream.backUp(1); // look for numbers\n      // Numbers in a baseform\n\n      if (stream.match(reBaseForm, true, false)) {\n        return 'number';\n      } // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n      // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n\n\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      }\n      /* In[23] and Out[34] */\n\n\n      if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n        return 'atom';\n      } // usage\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n        return 'meta';\n      } // message\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n        return 'string-2';\n      } // this makes a look-ahead match for something like variable:{_Integer}\n      // the match is then forwarded to the mma-patterns tokenizer.\n\n\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n        return 'variable-2';\n      } // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n      // Cannot start with a number, but can have numbers at any other position. Examples\n      // blub__Integer, a1_, b34_Integer32\n\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n        return 'variable-2';\n      }\n\n      if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      } // Named characters in Mathematica, like \\[Gamma].\n\n\n      if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n        return 'variable-3';\n      } // Match all braces separately\n\n\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      } // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n      // only one.\n\n\n      if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n        return 'variable-2';\n      } // Literals like variables, keywords, functions\n\n\n      if (stream.match(reIdInContext, true, false)) {\n        return 'keyword';\n      } // operators. Note that operators like @@ or /; are matched separately for each symbol.\n\n\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n        return 'operator';\n      } // everything else is an error\n\n\n      stream.next(); // advance the stream.\n\n      return 'error';\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'comment';\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-mathematica', {\n    name: 'mathematica'\n  });\n});"],"sourceRoot":""}