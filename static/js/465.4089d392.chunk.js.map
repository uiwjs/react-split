{"version":3,"sources":["../node_modules/codemirror/mode/dylan/dylan.js"],"names":["CodeMirror","forEach","arr","f","i","length","some","defineMode","_config","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","wordLookup","styleLookup","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","mod"],"mappings":"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","file":"static/js/465.4089d392.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function forEach(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      f(arr[i], i);\n    }\n  }\n\n  function some(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      if (f(arr[i], i)) return true;\n    }\n\n    return false;\n  }\n\n  CodeMirror.defineMode(\"dylan\", function (_config) {\n    // Words\n    var words = {\n      // Words that introduce unnamed definitions like \"define interface\"\n      unnamedDefinition: [\"interface\"],\n      // Words that introduce simple named definitions like \"define library\"\n      namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n      // Words that introduce type definitions like \"define class\".\n      // These are also parameterized like \"define method\" and are\n      // appended to otherParameterizedDefinitionWords\n      typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n      // Words that introduce trickier definitions like \"define method\".\n      // These require special definitions to be added to startExpressions\n      otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n      // Words that introduce module constant definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      constantSimpleDefinition: [\"constant\"],\n      // Words that introduce module variable definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      variableSimpleDefinition: [\"variable\"],\n      // Other words that introduce simple definitions\n      // (without implicit bodies).\n      otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n      // Words that begin statements with implicit bodies.\n      statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n      // Patterns that act as separators in compound statements.\n      // This may include any general pattern that must be indented\n      // specially.\n      separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n      // Keywords that do not require special indentation handling,\n      // but which should be highlighted\n      other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n      // Condition signaling function calls\n      signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n    };\n    words[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\n    words[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\n    words[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\n    words[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\n    words[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]); // Patterns\n\n    var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n    var symbol = new RegExp(\"^\" + symbolPattern);\n    var patterns = {\n      // Symbols with special syntax\n      symbolKeyword: symbolPattern + \":\",\n      symbolClass: \"<\" + symbolPattern + \">\",\n      symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n      symbolConstant: \"\\\\$\" + symbolPattern\n    };\n    var patternStyles = {\n      symbolKeyword: \"atom\",\n      symbolClass: \"tag\",\n      symbolGlobal: \"variable-2\",\n      symbolConstant: \"variable-3\"\n    }; // Compile all patterns to regular expressions\n\n    for (var patternName in patterns) {\n      if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n    } // Names beginning \"with-\" and \"without-\" are commonly\n    // used as statement macro\n\n\n    patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n    var styles = {};\n    styles[\"keyword\"] = \"keyword\";\n    styles[\"definition\"] = \"def\";\n    styles[\"simpleDefinition\"] = \"def\";\n    styles[\"signalingCalls\"] = \"builtin\"; // protected words lookup table\n\n    var wordLookup = {};\n    var styleLookup = {};\n    forEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n      forEach(words[type], function (word) {\n        wordLookup[word] = type;\n        styleLookup[word] = styles[type];\n      });\n    });\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      // String\n      var ch = stream.peek();\n\n      if (ch == \"'\" || ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString(ch, \"string\"));\n      } // Comment\n      else if (ch == \"/\") {\n          stream.next();\n\n          if (stream.eat(\"*\")) {\n            return chain(stream, state, tokenComment);\n          } else if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n          }\n\n          stream.backUp(1);\n        } // Decimal\n        else if (/[+\\-\\d\\.]/.test(ch)) {\n            if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n              return \"number\";\n            }\n          } // Hash\n          else if (ch == \"#\") {\n              stream.next(); // Symbol with string syntax\n\n              ch = stream.peek();\n\n              if (ch == '\"') {\n                stream.next();\n                return chain(stream, state, tokenString('\"', \"string\"));\n              } // Binary number\n              else if (ch == \"b\") {\n                  stream.next();\n                  stream.eatWhile(/[01]/);\n                  return \"number\";\n                } // Hex number\n                else if (ch == \"x\") {\n                    stream.next();\n                    stream.eatWhile(/[\\da-f]/i);\n                    return \"number\";\n                  } // Octal number\n                  else if (ch == \"o\") {\n                      stream.next();\n                      stream.eatWhile(/[0-7]/);\n                      return \"number\";\n                    } // Token concatenation in macros\n                    else if (ch == '#') {\n                        stream.next();\n                        return \"punctuation\";\n                      } // Sequence literals\n                      else if (ch == '[' || ch == '(') {\n                          stream.next();\n                          return \"bracket\"; // Hash symbol\n                        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n                          return \"atom\";\n                        } else {\n                          stream.eatWhile(/[-a-zA-Z]/);\n                          return \"error\";\n                        }\n            } else if (ch == \"~\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                ch = stream.peek();\n\n                if (ch == \"=\") {\n                  stream.next();\n                  return \"operator\";\n                }\n\n                return \"operator\";\n              }\n\n              return \"operator\";\n            } else if (ch == \":\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                return \"operator\";\n              } else if (ch == \":\") {\n                stream.next();\n                return \"punctuation\";\n              }\n            } else if (\"[](){}\".indexOf(ch) != -1) {\n              stream.next();\n              return \"bracket\";\n            } else if (\".,\".indexOf(ch) != -1) {\n              stream.next();\n              return \"punctuation\";\n            } else if (stream.match(\"end\")) {\n              return \"keyword\";\n            }\n\n      for (var name in patterns) {\n        if (patterns.hasOwnProperty(name)) {\n          var pattern = patterns[name];\n          if (pattern instanceof Array && some(pattern, function (p) {\n            return stream.match(p);\n          }) || stream.match(pattern)) return patternStyles[name];\n        }\n      }\n\n      if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n        stream.next();\n        return \"operator\";\n      }\n\n      if (stream.match(\"define\")) {\n        return \"def\";\n      } else {\n        stream.eatWhile(/[\\w\\-]/); // Keyword\n\n        if (wordLookup.hasOwnProperty(stream.current())) {\n          return styleLookup[stream.current()];\n        } else if (stream.current().match(symbol)) {\n          return \"variable\";\n        } else {\n          stream.next();\n          return \"variable-2\";\n        }\n      }\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          maybeNested = false,\n          nestedCount = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          if (nestedCount > 0) {\n            nestedCount--;\n          } else {\n            state.tokenize = tokenBase;\n            break;\n          }\n        } else if (ch == \"*\" && maybeNested) {\n          nestedCount++;\n        }\n\n        maybeEnd = ch == \"*\";\n        maybeNested = ch == \"/\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote, style) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) {\n          state.tokenize = tokenBase;\n        }\n\n        return style;\n      };\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          currentIndent: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n});"],"sourceRoot":""}