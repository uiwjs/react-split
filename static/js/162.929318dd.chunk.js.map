{"version":3,"sources":["../node_modules/prismjs/components/prism-http.js"],"names":["Prism","languages","http","pattern","inside","lookbehind","alias","options","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","RegExp","insertBefore"],"mappings":"gHAAA,SAAWA,GACTA,EAAMC,UAAUC,KAAO,CACrB,eAAgB,CACdC,QAAS,8FACTC,OAAQ,CAEN,SAAY,yDAEZ,YAAa,SAGjB,kBAAmB,CACjBD,QAAS,uBACTC,OAAQ,CAEN,SAAY,CACVD,QAAS,yBACTE,YAAY,KAKlB,cAAe,CACbF,QAAS,iBACTG,MAAO,YAIX,IA6BIC,EA7BAC,EAAQR,EAAMC,UACdQ,EAAgB,CAClB,yBAA0BD,EAAME,WAChC,mBAAoBF,EAAMG,MAAQH,EAAME,WACxC,kBAAmBF,EAAMI,IACzB,WAAYJ,EAAMI,IAClB,YAAaJ,EAAMK,KACnB,WAAYL,EAAMM,KAGhBC,EAAc,CAChB,oBAAoB,EACpB,mBAAmB,GASrB,SAASC,EAAiBC,GACxB,IAAIC,EAASD,EAAYE,QAAQ,YAAa,IAE9C,MAAO,MAAQF,EAAc,KADT,wBAA0BC,EAAS,gBACJ,IAOrD,IAAK,IAAID,KAAeR,EACtB,GAAIA,EAAcQ,GAAc,CAC9BV,EAAUA,GAAW,GACrB,IAAIJ,EAAUY,EAAYE,GAAeD,EAAiBC,GAAeA,EACzEV,EAAQU,EAAYE,QAAQ,MAAO,MAAQ,CACzChB,QAASiB,OAAO,qBAAuBjB,EAAU,yCAA0C,KAC3FE,YAAY,EACZD,OAAQK,EAAcQ,IAKxBV,GACFP,EAAMC,UAAUoB,aAAa,OAAQ,cAAed,GAxExD,CA0EGP","file":"static/js/162.929318dd.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.http = {\n    'request-line': {\n      pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n      inside: {\n        // HTTP Verb\n        'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n        // Path or query argument\n        'attr-name': /:\\w+/\n      }\n    },\n    'response-status': {\n      pattern: /^HTTP\\/1.[01] \\d+.*/m,\n      inside: {\n        // Status, e.g. 200 OK\n        'property': {\n          pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n          lookbehind: true\n        }\n      }\n    },\n    // HTTP header name\n    'header-name': {\n      pattern: /^[\\w-]+:(?=.)/m,\n      alias: 'keyword'\n    }\n  }; // Create a mapping of Content-Type headers to language definitions\n\n  var langs = Prism.languages;\n  var httpLanguages = {\n    'application/javascript': langs.javascript,\n    'application/json': langs.json || langs.javascript,\n    'application/xml': langs.xml,\n    'text/xml': langs.xml,\n    'text/html': langs.html,\n    'text/css': langs.css\n  }; // Declare which types can also be suffixes\n\n  var suffixTypes = {\n    'application/json': true,\n    'application/xml': true\n  };\n  /**\n   * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n   *\n   * @param {string} contentType\n   * @returns {string}\n   */\n\n  function getSuffixPattern(contentType) {\n    var suffix = contentType.replace(/^[a-z]+\\//, '');\n    var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n    return '(?:' + contentType + '|' + suffixPattern + ')';\n  } // Insert each content type parser that has its associated language\n  // currently loaded.\n\n\n  var options;\n\n  for (var contentType in httpLanguages) {\n    if (httpLanguages[contentType]) {\n      options = options || {};\n      var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n      options[contentType.replace(/\\//g, '-')] = {\n        pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n        lookbehind: true,\n        inside: httpLanguages[contentType]\n      };\n    }\n  }\n\n  if (options) {\n    Prism.languages.insertBefore('http', 'header-name', options);\n  }\n})(Prism);"],"sourceRoot":""}